<h1>About</h1>
<p><a href="https://nfulist.herokuapp.com/?semester=1092&amp;courseno=2384&amp;column=True">修課成員名單</a> (<a href="https://github.com/mdecourse/nfulist">網際程式原始碼</a>)</p>
<p>課程倉儲: <a href="https://github.com/mdecourse/wcmj2021">https://github.com/mdecourse/wcmj2021</a></p>
<p>課程網頁: <a href="https://mde.tw/wcmj2021">https://mde.tw/wcmj2021</a></p>
<p>課程 gitter: <a href="https://gitter.im/mdecourse/wcmj2021">https://gitter.im/mdecourse/wcmj2021</a></p>
<p>分組專題:</p>
<p style="padding-left: 30px;">W3 自選組員, 6 人一組.</p>
<p style="padding-left: 30px;">W10 之後的專題題目自選, 並在 <a href="https://github.com/mdecourse/wcmj2021/discussions">https://github.com/mdecourse/wcmj2021/discussions</a> 進行討論</p>
<p>評分:</p>
<p style="padding-left: 30px;">出席 10%</p>
<p style="padding-left: 30px;">個人倉儲與網頁 30%</p>
<p style="padding-left: 30px;">每週網際簡報 html 與 Pdf 報告 60% (含 Youtube 操作影片)</p>
<p>Repository template: <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a></p>
<h4>電腦輔助設計室與協同設計室行事曆</h4>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei">全頁檢視</a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei" width="800"></iframe></p><h2>WCM</h2>
<p>何謂網際內容管理 (Web-based Content Management)?</p>
<p style="padding-left: 30px;">在網際進行數位內容資料的管理</p>
<p style="padding-left: 60px;">何謂網際?</p>
<p style="padding-left: 90px;">Web-based</p>
<p style="padding-left: 120px;">何謂 Web?</p>
<p style="padding-left: 150px;">World-Wide-Web</p>
<p style="padding-left: 180px;">client-browser, server-WWW server</p>
<p style="padding-left: 60px;">何謂數位內容?</p>
<p style="padding-left: 90px;">能夠以數位格式儲存的內容</p>
<p style="padding-left: 120px;">text, equation, plot, images, audio, video, multi-media animation</p>
<p style="padding-left: 60px;">何謂管理?</p>
<p style="padding-left: 90px;">分門別類整理後便於保存, 查找, 分享數位內容</p>
<p style="padding-left: 90px;">管理的目的為何?</p>
<p style="padding-left: 120px;">紀錄解決問題的過程, 期再次碰到類似問題時可以儘量重用內容</p>
<p style="padding-left: 150px;">為何大多數內容重用只能是儘量重用?</p>
<p style="padding-left: 180px;">因為環境會變, 工具會變, 整體工作環境系統也會不斷改變</p>
<p>執行網際內容管理需不需要寫程式?</p>
<p style="padding-left: 30px;">不寫, 可以用其他人寫的工具與套件</p>
<p style="padding-left: 30px;">自己寫, 則可以依照自己或團隊的需求, 量身訂做自己需要的工具或管理系統</p><h2>三道牆理論</h2>
<p>KMOLab 所開設課程目的是將擋在機械工程師面前的三道牆, 直接利用課程講授的過程, 一一呈現, 讓大家有及時找出突破這三道障礙的機會, 不僅讓各自的潛能有所發揮, 同時也希望大家能更自在地面對未來的更多挑戰.<br/><br/>這三道牆分別是:</p>
<p>理論基礎障礙<br/>實務練習障礙<br/>確立目標障礙</p>
<h4>理論基礎障礙</h4>
<p>所謂的理論基礎障礙就是技職體系學生在高中階段經常疏忽的英文, 數學與邏輯思考與獲取學問的基本能力. 也就是英文聽說讀寫的基本能力, 數學基本能力與了解如何透過邏輯思考解題, 並且學習如何發問, 如何與人協同合作解決問題的能力.</p>
<p style="padding-left: 30px;"><a href="http://mde.tw/cad2020/content/W10-W14.html">http://mde.tw/cad2020/content/W10-W14.html</a></p>
<h4>實務練習障礙</h4>
<p>第二道牆則是實務練習障礙, 許多人不願意花時間在突破上述第一道障礙的原因, 通常是因為不知道學習這些相對抽象的知識有甚麼用處? 因此, 為了凸顯突破第一道牆的重要性, 就必須要透過實際的課程案例, 讓大家了解一旦能突破第一道牆的障礙後, 養成持續學習這些理論基礎內容之後, 就可以相對用比較有效率的方式解決各種問題.</p>
<p>但是這需要學習者付出時間與耐性, 當面對完全陌生議題時, 就必須檢討是否第一道牆仍然卡在自己與解決方案中間. 然後用心不斷思考, 探索與練習之後, 若還是無法解決問題. 就必須要先試著描述問題後再尋求他人的協助.</p>
<p>假如能有以上的正確學習態度, 就有機會在面對各種問題時, 持續突破前面的兩道牆, 然後看到自己所追求的第三道牆, 並且此後能夠竭盡全力, 翻閱第三道牆的障礙, 積極達成預定目標.</p>
<p style="padding-left: 30px;"><a href="http://mde.tw/cad2020/content/HW1.html">http://mde.tw/cad2020/content/HW1.html</a></p>
<p style="padding-left: 30px;"><a href="http://mde.tw/cad2020/content/HW2.html">http://mde.tw/cad2020/content/HW2.html</a></p>
<p style="padding-left: 60px;"><a href="http://mde.tw/cad2020/content/HW1_SW.html">http://mde.tw/cad2020/content/HW1_SW.html</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/KmolYuan/Pyslvs-UI">https://github.com/KmolYuan/Pyslvs-UI</a></p>
<h4>確立目標障礙</h4>
<p>你的人生目標是甚麼?</p>
<p style="padding-left: 30px;"><a href="https://www.ptt.cc/bbs/Tech_Job/M.1588362728.A.14F.html">https://www.ptt.cc/bbs/Tech_Job/M.1588362728.A.14F.html</a></p><h2>個人電腦</h2>
<p>機械工程師由於必須在個人電腦上繪製並顯示 3D 零組件, 因此個人電腦通常需要配備獨立顯示卡, 其基本規格與電競機類似:</p>
<p><a href="https://www.crucial.tw/articles/for-gamers/the-best-specs-for-a-gaming-pc">https://www.crucial.tw/articles/for-gamers/the-best-specs-for-a-gaming-pc</a></p>
<p>CPU (<a href="https://en.wikipedia.org/wiki/Central_processing_unit">Central Processing Unit</a>) - 中央處理器</p>
<p style="padding-left: 30px;">Intel Processor: <a href="https://en.wikipedia.org/wiki/List_of_Intel_processors">https://en.wikipedia.org/wiki/List_of_Intel_processors</a></p>
<p style="padding-left: 30px;">AMD Processor: <a href="https://en.wikipedia.org/wiki/List_of_AMD_processors">https://en.wikipedia.org/wiki/List_of_AMD_processors</a></p>
<p style="padding-left: 30px;">ARM Architecture: <a href="https://en.wikipedia.org/wiki/ARM_architecture">https://en.wikipedia.org/wiki/ARM_architecture</a></p>
<p style="padding-left: 30px;">Apple Designed Processor: <a href="https://en.wikipedia.org/wiki/Apple-designed_processors">https://en.wikipedia.org/wiki/Apple-designed_processors</a> 　</p>
<p>FULL HD (<a href="https://en.wikipedia.org/wiki/High-definition_video">High Definition</a>)</p>
<p><a href="https://en.wikipedia.org/wiki/Motherboard">Motherboard</a> 主機板</p>
<p>RAM (<a href="https://en.wikipedia.org/wiki/Random-access_memory">Random-Access Memory</a>)</p>
<p style="padding-left: 30px;">DDR (<a href="https://en.wikipedia.org/wiki/Double_data_rate">Double Data Rate</a>)</p>
<p>何謂 HDD/SSD? 有何差別?</p>
<p style="padding-left: 30px;">何謂 RPM?</p>
<p style="padding-left: 30px;">何謂 ATA、PATA、與 SATA 連接埠? 有何差別?</p>
<p>何謂 Video Card?</p>
<p style="padding-left: 30px;">何謂 fps?</p>
<p style="padding-left: 30px;">何謂 DVI?</p>
<p style="padding-left: 30px;">何謂 HDMI?</p>
<p style="padding-left: 30px;">何謂 <a href="https://en.wikipedia.org/wiki/Light-emitting_diode">LED</a>?</p>
<p>何謂 DirectX?</p>
<p>何謂 <a href="https://en.wikipedia.org/wiki/Watt">Watt</a>?</p>
<p style="padding-left: 30px;">何謂 <a href="https://en.wikipedia.org/wiki/Power_(physics)">Power</a>?</p>
<p>何謂 Hz (<a href="https://en.wikipedia.org/wiki/Hertz">Hertz</a>)?</p>
<p>Computer Monitor</p>
<p style="padding-left: 30px;">何謂 ppi?</p><h2>Network</h2>
<p><a href="https://searchnetworking.techtarget.com/tip/How-to-calculate-network-bandwidth-requirements">Understanding bandwidth</a><br/><br/>Bandwidth refers to the data rate that is supported by the network connection or the interfaces that connect to the network. It represents both volume and time, representing the amount of data that can be transmitted between two points in a set period of time. It is usually expressed in terms of bits per second (bps), or sometimes in bytes per second (Bps).<br/><br/>Network bandwidth represents the capacity of the network connection, though it's important to understand the distinction between theoretical throughput and real-world results when figuring out the right bandwidth formula for your network. For example, a 1000BASE-T -- which uses unshielded twisted-pair cables -- Gigabit Ethernet (GbE) network can theoretically support 1,000 megabits per second (Mbps), but this level can never really be achieved in practice because of hardware and systems software overhead.<br/><br/>One point to consider when thinking about how to calculate bandwidth needs on your network is this: Bandwidth should not be confused with throughput, which refers to speed. While high-bandwidth networks are often fast, that is not always the case. A helpful metaphor when thinking about bandwidth is cars on a highway. A high-bandwidth network is like a six-lane highway that can fit hundreds of cars at any given moment. A low-bandwidth network is like a single-lane road in which one car queues directly behind another.<br/><br/>Although the large highway is likely to move vehicles faster, rush-hour traffic can easily bring cars and trucks to a standstill. Or, perhaps, the cars cannot get onto the highway quickly because it's clogged with large delivery trucks that take up a lot of space on the road. Similarly, even a high-bandwidth network can run slowly in the face of problems, such as congestion and bandwidth-hungry applications.<br/><br/>These very points make calculating bandwidth requirements a challenge, yet the consequences of getting the bandwidth formula wrong are considerable. If you don't procure enough bandwidth, you all but guarantee the network will run slowly. However, significantly overprovisioning bandwidth can be cost-prohibitive for most enterprises.<br/><br/>So, how do you determine the right formula that will meet your bandwidth requirements? The process begins with asking the right questions: What applications are users running, and what is the performance service-level agreement for these applications? I know some network managers who are only concerned with how many users are on a virtual LAN. What you really need to know is what the users will be doing on the network. It's possible that 200 users will cause less of a bottleneck than a group of three users that really beats the heck out of the network because of some funky client-server application or extensive use of a bandwidth-heavy service, like high-definition video conferencing.</p>
<p><img alt="" height="318" src="/images/ethernet_speed_roadmap.jpg" width="600"/></p>
<p>了解 <a href="https://www.wireshark.org">https://www.wireshark.org</a> 的用法, 並藉以提升網路頻寬的使用效能及安全.</p>
<p style="padding-left: 30px;">近端下載</p>
<p><a href="http://a.kmol.info:88/Wireshark-win64-3.4.2.exe">http://a.kmol.info:88/Wireshark-win64-3.4.2.exe</a></p><h3>Switch</h3>
<p>Not all switches are created equal.</p>
<p><a href="https://community.cisco.com/t5/switching/switch-backplane-forwarding-rate-throughput-bandwidth/td-p/1432400">來源</a></p>
<p><a href="https://www.cisco.com/c/en/us/products/switches/index.html#~products">https://www.cisco.com/c/en/us/products/switches/index.html#~products</a></p>
<p><a href="https://www.cisco.com/c/dam/en/us/products/collateral/switches/catalyst-9300-series-switches/nb-06-upgrading-cat-9300-fc-cte-en.pdf">https://www.cisco.com/c/dam/en/us/products/collateral/switches/catalyst-9300-series-switches/nb-06-upgrading-cat-9300-fc-cte-en.pdf</a></p>
<p>internally to a switch a specialized hardware is needed to move frames between ports.<br/><br/>This specific part can be called backplane (背板) or in some cases we talk of switching fabric (交換結構).<br/><br/>When the forwarding capabilities of a backplane or switching fabric are greater then the sum of speeds of all ports (counted twice one for tx and one rx direction) we call the switching fabric non blocking: traffic between a pair of ports is not influenced by what traffic is exchanged on all other ports.<br/><br/>The forwarding rate is expressed in packet per seconds and expresses how many packets per second are needed to reach a certain traffic volume (throughpout)<br/><br/>Clearly forwarding rate depends on frame size.<br/><br/>Ideally a backplane switching fabric should be non blocking for every frame size including the smallest ones (64 bytes in ethernet standard) but in reality most devices can be non blocking for an average size of 400 bytes.<br/><br/>bandwidth: the speed of traffic.<br/><br/>to convert between forwarding rate and used bandwidth we need to take in account some specific aspects of ethernet:<br/><br/>each frame has an 8 byte preamble that is used to allow to potential receiver to synchronize with the signal<br/><br/>between two frames a minimum silence interval must exist to allow receiver to discriminate between two frames<br/><br/>preamble and inter frame gap counts for 20,2 bytes.<br/><br/>So given an iP packet of size N the ethernet frame has size N+18  (header 14 bytes, FCS 4 byte) but counts as (N+18+20,2)*8 on wire<br/><br/>8 is number of bits in a byte<br/><br/>with this kind of calculation using frames of minimum size 64 bytes you need 1488000 frames per second and per direction to fill a GE port.<br/><br/>Be also aware that all figures you see sum tx and rx directions so if a switch has 100 M pps capability this accounts for a certain number of GE ports at 1 Gbps full duplex.<br/><br/></p>
<p>Do not confuse the speed of the stackwise ring with the internal switching fabric of each stack member, they are different: the internal switching fabric should be used for traffic between ports on the same stack member device, the stackwise bandwidth should be used when traffic must flow between ports located on different stack members.<br/><br/>Note: this is just my assumption about the implementation of stack, it may be different with the dual ring involved also for traffic between two ports on the same member switch. (total lack of so called local switching capabilities).<br/><br/>The stack implements a dual ring topology between the member switches that act as an extension of the individual switching fabrics.<br/><br/>The speed of the ring for a stack of only 3750-X (stackwise plus) should be 32 Gbps full duplex that allows for a very good interconnection between member switches, but I agree it is not enough to classify the composite switching fabric as not blocking.<br/><br/>On the other hand, only models with 10GE ports can be interconnected at comparable speeds.<br/><br/>To make a comparison a C6500 equipped with Sup720 generation route processor provides up to 40 Gbps per slot to/from the switching fabric and some linecards are faster then that ( think of  WS-6708 or WS-6716 with 8 and 16 tengiga ports respectively).<br/><br/>About the forwarding capacity in pps:<br/><br/>for a 24 ports device is listed as 65.5 Mbps that accounts for 22 GE ports 1Gbps full duplex with 64 byte frames.</p>
<p>An original series 3750 (or 3560) fabric is 32 Gbps.  This is different from the stack ring's "32 Gbps" (which is really dual 8 Gbps, duplex).<br/><br/>An original series 3750 (or 3560) internal fabric, in theory, is oversubscribed by more than 16 gig ports (i.e. the "G" suffixed original models).<br/><br/>The terms non-blocking and blocking, when examining switch fabric isn't just sufficient bandwidth capacity to forward all port bandwidths, it's whether the fabric's architecture will block, or not, forwarding of frames even if there's "sufficient" bandwidth.<br/><br/>For example, you have three ingress ports.  Two are sending to one egress port (2:1) and the other is sending to other egress port (1:1).  If 2:1 congestion on the one egress port delays (or blocks) transmission on the 1:1 egress port, you have HOL (head-of-line) blocking even though the internal fabric's bandwidth could support each ingress port sending to a separate egress port (all 1:1).<br/><br/>StackWise (and StackWise+), when available, use both ring ports.<br/><br/>Original StackWise copies ALL member switch traffic to the stack ring.  Original StackWise source stack member also removes the traffic it placed on the stack ring.<br/><br/>StackWise Plus only places unicast traffic on the stack ring when destination is not a local switch port.  Additionally, destination switch member removes unicast packets.  (I.e. StackWise+ uses it's ring much more intelligently.  It also has dual 16 Gbps stack ring ports.  NB:StackWise+, for the most part, reverts to StackWise operation if there's a StackWise only member switch in the stack [good reason not to use such mixed stacks].)<br/><br/>Bits per second, is the transmission rate supported by the media.  So, for example, 100 Mbps allows transmission of 100,000,000 bits per seconds.  However, transferring actual data, in something like physical segments (e.g. frames) uses some of this capacity for both framing overhead and framing delineation, so useful capacity is less than the often quoted bps rate.  Useful capacity percentage (of overall rate) also generally decreases as frame size decreases.  (BTW, similar issue with disk media.  At least disk capacity isn't, generally, quoted for its unformatted capacity any longer.)<br/><br/>The 25 Mbps throughput is rated for minimum sized packets.  Larger packets often allow much higher throughput as the packets per second requirement (for same bandwidth) decreases.  (Sometimes the vendor will document PPS rates for multiple packet sizes.  Without such documentation, or your own testing, just knowing documented performance for one packet size you cannot accurately predict a device's performance for other packet sizes.)</p>
<p><a href="https://topic.alibabacloud.com/a/how-is-the-backplane-bandwidth-switching-capacity-and-packet-forwarding-rate-of-the-switch-calculated-why-each-manufacturers_8_8_31249771.html">來源</a></p>
<p>Switch backplane bandwidth, switching capacity, packet forwarding rate difference Backplane bandwidth refers to the entire switching capacity of the backplane, switching capacity refers to the switching capacity of the CPU, and packet forwarding refers to the capacity of the three-layer forwarding.<br/><br/>First, the backplane bandwidth<br/><br/>1. Switch backplane bandwidth meaning</p>
<p>The backplane bandwidth of the switch, also called the backplane capacity, is the maximum amount of data that can be handled between the switch interface processor or the interface card and the data bus. The backplane bandwidth marks the total data exchange capacity of the switch, in Gbps. The backplane bandwidth of a typical switch ranges from a few Gbps to hundreds of Gbps. The higher the backplane bandwidth of a switch, the better the ability to process data, but at the same time the design cost will be higher.<br/><br/>2. The internal structure of the switch</p>
<p>The utilization of backplane bandwidth resources is closely related to the internal structure of the switch. At present, the internal structure of the switch mainly has the following types:</p>
<p>First, a shared memory structure, which relies on a central switching engine to provide a high-performance connection for a full port, and the core engine checks each input packet to determine a route. This method requires a large memory bandwidth and high management cost. Especially with the increase of the switch port, the price of the central memory will be very high, so the switch core becomes the bottleneck of performance realization;</p>
<p>the second is the cross bus structure, which can Establish a direct point-to-point connection between ports, which is good for single-point transmission, but not suitable for multi-point transmission;</p>
<p>the third is a hybrid cross-bus structure, which is a hybrid cross-bus implementation. Its design idea is to integrate The cross bus matrix is divided into small cross matrices connected by a high performance bus. The advantage is that the number of cross-buses is reduced, the cost is reduced, and bus contention is reduced; however, the bus connecting the cross-matrix becomes a new performance bottleneck.<br/><br/>3. Linear non-blocking transmission</p>
<p>The best performance we can buy for the transfer machine is to require linear non-blocking transmission. How do we investigate whether the backplane bandwidth of a switch is sufficient? How to determine whether the design of the switch you bought is reasonable, and there is a blocking structure design?</p>
<p>Calculation formula:</p>
<p>A. The sum of the number of all port capacity X ports should be less than the backplane bandwidth, which can realize full-duplex non-blocking switching, which proves that the switch has the conditions of maximizing data exchange performance.</p>
<p>B. Full configuration throughput (Mbps) = full configuration GE port number × 1.488 Mpps, wherein the theoretical throughput of a Gigabit port with a packet length of 64 bytes is 1.488 Mpps. For example, a switch with up to 64 Gigabit ports should have a full configuration throughput of 64 x 1.488 Mpps = 95.2 Mpps to ensure non-blocking packet switching when all port line speeds are working. Example: If a switch can provide up to 176 Gigabit ports and the declared throughput is less than 261.8 Mpps (176 x 1.488 Mpps = 261.8), then the user has reason to believe that the switch is designed with a blocking structure.</p>
<p>For 10 Gigabit Ethernet, the packet forwarding rate of a wire-speed port is 14.88 Mpps.</p>
<p>For Gigabit Ethernet, the packet forwarding rate of a wire-speed port is 1.488 Mpps.</p>
<p>For Fast Ethernet, the packet forwarding rate of a wire-speed port is 0.1488 Mpps.</p>
<p>For OC-12 POS ports, the packet forwarding rate of a line rate port is 1.17 Mpps.</p>
<p>For the POS port of OC-48, the packet forwarding rate of one line-speed port is 468MppS.</p>
<p>Therefore, if we can meet the above three conditions, then we say that this switch is truly linear and non-blocking; the back-up rate of the switch is generally:</p>
<p>Mbps, which refers to the second layer, which is used for the exchange of more than three layers.</p>
<p>Mpps<br/><br/>4. The backplane bandwidth does not exist in the switch with the fixed port.</p>
<p>This concept is only possible with modular switches (with scalable slots that can flexibly change the number of ports). Fixed-port switches do not have this concept, and the backplane capacity and switching capacity of fixed-port switches are equal. The backplane bandwidth determines the maximum bandwidth for the connection between each board (including boards that are not yet installed in the expandable slot) and the switching engine. Due to the different architectures of modular switches, backplane bandwidth is not fully effective at representing the true performance of the switch. Fixed port switches do not have the concept of backplane bandwidth.<br/><br/>Second, the exchange capacity</p>
<p>It is the transmission capacity of the core CPU and bus, generally smaller than the backplane bandwidth. H3C low-end LSW switching uses the store-and-forward mode. The size of the switching capacity is determined by the bit width of the buffer (BUFFER) and its bus frequency. That is, the switching capacity = cache bit width * cache bus frequency = 96 * 133 = 12.8 Gbps H3C high-end switch exchange capacity can be equal to twice the total port capacity, total port capacity = 2 * (n * 100Mbps + m * 1000Mbps) ( n: indicates that the switch has n 100M ports, m: indicates that the switch has m 1000M ports.</p>
<p>3. The packet forwarding rate forwarding capability is measured by the minimum packet length. For the Ethernet minimum packet is 64BYTE, plus the frame overhead 20BYTE. Therefore, the minimum package is 84BYTE. For a full-duplex 1000Mbps interface to achieve line speed requirements: forwarding capacity = 1000Mbps / ((64 + 20) * 8bit) = 1.488Mpps for a full-duplex 100Mbps interface to achieve line speed requirements: forwarding capacity = 100Mbps / ((64+20)*8bit)=0.149Mpps Unit: Mpps (Million packets per second)<br/><br/>This article is from the "Snow Moon Studio" blog, please be sure to keep this source <a href="http://xueyue8.blog.51cto.com/4650249/1765750">http://xueyue8.blog.51cto.com/4650249/1765750</a> <br/><br/>How is the backplane bandwidth, switching capacity, and packet forwarding rate of the switch calculated? For the manufacturers, the standard is higher than the line speed forwarding.</p><h1>Topics</h1>
<p>個人電腦軟體與硬體基本概念</p>
<p>網路基本概念與設定</p>
<p>Windows 10 64 位元隨身程式系統</p>
<p><a href="http://mde.tw">http://mde.tw</a></p>
<p>cmsimde</p>
<p>blogger</p>
<p>Github</p>
<p>Fossil SCM</p>
<p><a href="http://fossil.kmol.info">http://fossil.kmol.info</a></p>
<p style="padding-left: 30px;"><a href="http://mde.tw/fosgit">http://mde.tw/fosgit</a></p>
<p style="padding-left: 30px;"><a href="http://fossil.kmol.info/fosgit/doc/trunk/index.html">http://fossil.kmol.info/fosgit/doc/trunk/index.html</a></p>
<p style="padding-left: 30px;"><a href="https://fossil.kmol.info/fosgit/doc/0f7bf53ab9/content/index.html">https://fossil.kmol.info/fosgit/doc/0f7bf53ab9/content/index.html</a> </p>
<p><a href="http://jpme.eng.nfu.edu.tw">http://jpme.eng.nfu.edu.tw</a></p>
<p></p><h2>Topic 1</h2>
<h4>計算機概論課程回顧</h4>
<p>首先必須先了解電腦輔助設計室中的網路設定:</p>
<p>由於上課時各電腦採用純 IPv6 協定上網, 因此可以將 IPv4 網路協定勾選移除, 且以 DHCP6 取得 2001:288:6004:17:xxxx 格式的 IPv6 網路位址, 惟需自行設定 DNS 伺服器. 可以選擇機械設計工程系的 DNS 伺服器 2001:288:6004:17::3 或中華電信 DNS 伺服器 2001:b000:168::1</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/DTevKRLDlDg" width="560"></iframe></p>
<p>接著學習如何利用可攜式 ShareX 錄製電腦操作畫面流程, 存為 mp4 格式後上傳到 @gm 帳號對應的 Youtube. 本課程建議各學員將每週根據課程進度所操作的流程錄製成 mp4 影片嵌入個人的網誌與網頁中.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/C-NXtt3ZUPc" width="560"></iframe></p>
<p>接著學習如何利用 @gm 帳號建立分組 Blogger. 完成後各分組的網誌連結如下:</p>
<p><a href="https://wcmj2021g1.blogspot.com">https://wcmj2021g1.blogspot.com</a></p>
<p><a href="https://wcmj2021g2.blogspot.com">https://wcmj2021g2.blogspot.com</a></p>
<p><a href="https://wcmj2021g3.blogspot.com">https://wcmj2021g3.blogspot.com</a></p>
<p><a href="https://wcmj2021g4.blogspot.com">https://wcmj2021g4.blogspot.com</a></p>
<p><a href="https://wcmj2021g5.blogspot.com">https://wcmj2021g5.blogspot.com</a></p>
<p><a href="https://wcmj2021g6.blogspot.com">https://wcmj2021g6.blogspot.com</a></p>
<p><a href="https://wcmj2021g7.blogspot.com">https://wcmj2021g7.blogspot.com</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/Fca48ERoZqY" width="560"></iframe></p>
<p>各組組長完成分組 Blogger 網誌建立後, 可利用設定選項將各組員設為可在分組網誌發佈文章的協同管理者或協同作者.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/P1VtVwjyg-g" width="560"></iframe></p>
<p>接著學習如何透過 Youtube 影片中分享功能中的嵌入選擇取得特定影片的 iframe 嵌入 html 後, 可將各組員所製作的電腦操作影片嵌入個人網站或分組網誌中.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/9Oq7EGsFEJc" width="560"></iframe></p>
<p>每一位學員登入學校配發的 Gmail 帳號後, 至 <a href="https://www.blogger.com">https://www.blogger.com</a> 建立一個網誌, 並將上學期計算機課程的內容摘要整理為 <a href="https://www.blogger.com">Blogger</a> 網誌內容. 可以按照每一週的教學內容整理為網誌, 或者根據教學主題內容整理為網誌內容.</p>
<p>請問:</p>
<p style="padding-left: 30px;"><span style="background-color: #ffff99;">已知 <a href="https://nfulist.herokuapp.com/?semester=1092&amp;courseno=2384&amp;column=True" style="background-color: #ffff99;">修課學員名單</a> (<a href="https://github.com/mdecourse/nfulist" style="background-color: #ffff99;">nfulist 程式碼</a>) (<a href="https://github.com/mdecourse/nfulist/discussions/2" style="background-color: #ffff99;">從教務主機查詢資料</a>) 可以取得修課學員名單, 是否可以用於取得各學員的個人 <a href="https://www.blogger.com" style="background-color: #ffff99;">Blogger</a> 連結?</span></p>
<p style="padding-left: 60px;">採人工方式啟動 Ethercalc 網際表單, 從修課學員名單中複製學號行資料, 然後在 <a href="https://gitter.im/mdecourse/wcmj2021">https://gitter.im/mdecourse/wcmj2021</a> 公佈網際表單連結, 讓各學員依照學號填入個人 Blogger 網誌連結後, 再複製資料, 並設法轉為 HTML Anchor 連結.</p>
<p style="padding-left: 60px;">上述流程能不能採更方便的流程進行 (減少人工複製與處理可能產生的錯誤)?</p>
<p style="padding-left: 90px;"><a href="http://mde.tw/cad2020/content/Ethercalc.html">http://mde.tw/cad2020/content/Ethercalc.html</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/audreyt/ethercalc/blob/master/API.md">https://github.com/audreyt/ethercalc/blob/master/API.md</a></p>
<p style="padding-left: 90px;"><a href="https://pypi.org/project/ethercalc-python/">https://pypi.org/project/ethercalc-python/</a></p>
<p style="padding-left: 90px;"><a href="http://mde.tw/cd2021/content/Topics.html">http://mde.tw/cd2021/content/Topics.html</a></p>
<p style="padding-left: 90px;"><a href="https://developers.google.com/blogger">Blogger API</a> 能夠做甚麼?</p>
<p style="padding-left: 60px;">相關技術:</p>
<p style="padding-left: 90px;"><a href="https://docs.python.org/3/tutorial/">Python</a> - 會編寫基本的 Python 程式</p>
<p style="padding-left: 120px;"><a href="http://mde.tw/cp2020">http://mde.tw/cp2020</a></p>
<p style="padding-left: 90px;"><a href="https://developer.mozilla.org/zh-TW/docs/Learn/Getting_started_with_the_web/HTML_basics">HTML</a> - 了解超文件相關標註用法</p>
<p style="padding-left: 90px;"><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript">Jascript</a> - 了解 Javascript 如何與 HTML 結合應用?</p>
<p style="padding-left: 90px;"><a href="https://flask.palletsprojects.com/en/1.1.x/">Flask</a> - 了解如何使用 Flask 網際框架?</p>
<p style="padding-left: 90px;"><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">bs4</a> - 了解如何透過 Python 的 beautifulsoup 模組解讀 HTML 取用網頁上的相關資料?</p>
<p style="padding-left: 90px;"><a href="https://www.w3schools.com/xml/ajax_intro.asp">AJAX</a> - 了解 AJAX 如何運作? 如何應用?</p>
<p style="padding-left: 90px;"><a href="https://www.heroku.com/">Heroku</a> - 了解如何將網際程式部署到 Heroku 雲端系統?</p>
<p style="padding-left: 120px;"><a href="http://mde.tw/cp2020/content/Heroku.html">http://mde.tw/cp2020/content/Heroku.html</a></p>
<p style="padding-left: 120px;"><a href="http://mde.tw/cp2020/content/scissor-rock-paper.html">http://mde.tw/cp2020/content/scissor-rock-paper.html</a></p>
<p style="padding-left: 30px;">應該要如何將選課學員的個人 <a href="https://www.blogger.com">Blogger</a> 網誌連結整理 (嵌入)在這個頁面?</p>
<p style="padding-left: 30px;"><a href="https://drive.google.com/file/d/1x-e6p61Df2RiJpV4YmY3opSoBQnXEv6R/view?usp=sharing">2010_Beginning Google Blogger.pdf</a></p>
<p style="padding-left: 30px;">網際內容管理課程目標:</p>
<p style="padding-left: 60px;">精密機械設計工程師可以利用具版次與歷程管理系統, 長期記錄學習與研究結果.</p>
<p style="padding-left: 60px;">利用網際流程展示產品設計或製造流程</p>
<p style="padding-left: 90px;"><a href="http://mde.tw/virtualkossel/">http://mde.tw/virtualkossel/</a></p>
<h4 style="padding-left: 30px;">背景知識:</h4>
<p style="padding-left: 60px;"> 英文閱讀能力重不重要?</p>
<p style="padding-left: 90px;">何謂 <a href="https://en.wikipedia.org/wiki/World_Wide_Web">World Wide Web</a>? (<a href="https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91">全球資訊網</a>, 又稱為萬維網)</p>
<p style="padding-left: 90px;">為什麼 <a href="https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91">https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91</a> 其實就是<a href="https://zh.wikipedia.org/wiki/萬維網">https://zh.wikipedia.org/wiki/萬維網</a></p>
<p style="padding-left: 90px;">html 與 WWW 的關係為何？</p>
<p style="padding-left: 90px;">為什麼在上列中文版的萬維網說明頁面, 會被標註"此條目翻譯品質不佳"? 英文說明頁為何沒有這樣的問題?</p>
<p style="padding-left: 60px;">電腦軟硬體應用能力重不重要?</p>
<p style="padding-left: 90px;">要將各學員的 <a href="https://www.blogger.com">Blogger</a> 網誌連結放入這個頁面, 除了手動一一 key in 編輯外, 還有沒有其他較有效率的做法?</p>
<p style="padding-left: 120px;">用 <a href="https://ethercalc.net/">https://ethercalc.net/</a> 按照學號次序取得各學員的 <a href="https://www.blogger.com">Blogger</a> 網誌連結後, 存成檔案, 然後再編寫程式讀取各學員的網誌連結後, 建立所需的 html 超文件格式內容後, 直接差異本頁面特定位置後存檔.</p>
<p style="padding-left: 120px;">將本網誌設定為可公開編輯的動態網頁模式, 讓各學員自行登入將網誌連結輸入後, 以"協同編輯模式"存檔後進行檢查與整理. (此一方案所得到的結果, 與上列其他方法比較有何優點或缺點?)</p>
<p style="padding-left: 120px;">還有沒有其他更有效率的做法?</p>
<h4 style="padding-left: 30px;">議題討論:</h4>
<p style="padding-left: 60px;">假如一位精密機械工程師只能接收中文資料, 面對"翻譯品質不佳"的萬維網"說明內容, 是否應該有因應對策?</p>
<p style="padding-left: 90px;">KMOLab 鼓勵年輕人儘快翻越橫在面前的<a href="http://mde.tw/wcmj2021/content/%E4%B8%89%E9%81%93%E7%89%86%E7%90%86%E8%AB%96.html">三面牆理論</a>.</p>
<p style="padding-left: 60px;">假如想要利用程式方法解決電腦軟硬體應用過程所碰到的問題? 該具備哪些基本條件?</p>
<p style="padding-left: 90px;">你對電腦與網路的軟硬體配置及應用有多少了解?</p>
<p style="padding-left: 90px;">你是否具備基本的英文閱讀能力? 你能夠不看鍵盤進行英文與中文打字嗎? 我應該要學習哪一種或哪幾種中文輸入法? 或者此後完全使用語音轉文字的方式輸入?</p>
<p style="padding-left: 60px;">截至目前只上過計算機概論, 而且下學期才上計算機程式, 我們有能力現在就開始學習如何寫電腦程式嗎?</p>
<p style="padding-left: 90px;">電腦與網路軟硬體是現代人生活中不可或缺的工具, 只要確認數位方法能夠有效解決問題, 任何人都可以在任一時間點設法透過客製化的軟硬體方案 (自行編寫或修改既有方案) 解決所面臨的問題.</p>
<p style="padding-left: 120px;">了解 Windows 10 64 位元基本操作方式</p>
<p style="padding-left: 120px;">自行在 Windows 10 64 位元中建立可攜程式環境 (Why?)</p>
<p style="padding-left: 120px;">自行在 Windows 10 64 位元環境中建立 Ubuntu 虛擬 Virtualbox 主機, 或者透過 <a href="https://docs.microsoft.com/zh-tw/windows/wsl/install-win10">WSL</a> 了解 Linux 系統應用方法.</p>
<h3>主機板</h3>
<p><a href="https://medium.com/ai%E5%8F%8D%E6%96%97%E5%9F%8E/other-uefi-bios-legacy-%E6%B7%BA%E8%AB%87%E4%B8%BB%E6%A9%9F%E6%9D%BFuefi%E8%A7%80%E5%BF%B5%E8%88%87%E8%BF%B7%E6%80%9D-%E8%BD%89%E9%8C%84-dc86f61b85bd">UEFI 觀念與迷思</a></p>
<p><a href="https://www.freecodecamp.org/news/uefi-vs-bios/">UEFI vs. BIOS</a></p>
<p><a href="https://kknews.cc/zh-tw/tech/rz4qyqo.html">UEFI 與 BIOS 有甚麼區別?</a></p>
<p><a href="https://www.howtogeek.com/56958/htg-explains-how-uefi-will-replace-the-bios/">說明為何要以 UEFI 取代 BIOS?</a></p>
<p><a href="https://uefi.org/sites/default/files/resources/UEFI_Spec_2_8_final.pdf">UEFI v.2.8 Specification.pdf</a></p>
<p><a href="https://software.intel.com/content/www/us/en/develop/articles/unified-extensible-firmware-interface.html">Defining the Interface Between the Operating System and Platform Firmware</a></p>
<p><a href="https://zh.wikipedia.org/wiki/%E7%B5%B1%E4%B8%80%E5%8F%AF%E5%BB%B6%E4%BC%B8%E9%9F%8C%E9%AB%94%E4%BB%8B%E9%9D%A2">統一可延伸韌體介面</a></p>
<p>請各組看完上述資料後, 針對 UEFI 與 BIOS 開機流程與架構, 配合實作整理出一份內容摘要.</p>
<p style="padding-left: 60px;"></p><h2>W2-W3</h2>
<p>說明與機械設計工程系綜一館八樓電腦輔助設計室電腦網路設定有關的步驟</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/OsUNoFYaRU4" width="560"></iframe></p>
<p>demo 如何利用 git 將遠端 <a href="https://github.com/mdecourse/wcmj2021">https://github.com/mdecourse/wcmj2021</a> 倉儲 git clone --recurse-submodules URL 到近端後, 利用 Python 啟動 cmsimde 網際內容管理系統的動態網站, 加入第三階的 W2 頁面後, 將上一個影片嵌入後, 以 git add, commit 及 push 把改版的內容新增提交推送至 Github 倉儲, 得到改版後的 <a href="http://mde.tw/wcmj2021/content/W2.html">http://mde.tw/wcmj2021/content/W2.html</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/Z_PESGUDKZY" width="560"></iframe></p>
<p><br/>說明如何從 <a href="http://a.kmol.info:88">http://a.kmol.info:88</a> 下載可攜程式系統 kmol2021_spring_v3.7z, 利用 <a href="https://www.7-zip.org">https://www.7-zip.org</a> 解開壓縮後, 即可用 start_ipv6.bat 啟動系統, 並示範如何執行 Python 程式.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/8LGEoyAs8xQ" width="560"></iframe></p>
<p><br/>說明如何利用 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a> 建立自己的 帳號.github.io 網站</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/d_6dK-cHKUg" width="560"></iframe></p><h2>W4</h2>
<p>截至目前為止, 我們已經介紹如何利用學校所配發的 @gm 電子郵件帳號建立在 <a href="https://www.blogger.com">https://www.blogger.com</a> 的<span style="background-color: #ffff99;">個人網誌</span>以及<span style="background-color: #ffff99;">分組網誌</span>, 也說明如何在 <a href="https://github.com/">https://github.com/</a> 利用 <span style="background-color: #ccffcc;">帳號.github.io</span> 倉儲建立<span style="background-color: #ffff99;">個人網站</span>, 接下來將以每組六人為一個單位進行網際內容的閱讀以及整理, 以下為第九週期中考之前, 希望各組完成閱讀, 討論並整理的相關內容:</p>
<ol>
<li>與計算機概論與電腦網路有關的內容整理 - <a href="/downloads/Introduction_ to_computers_10_pages.pdf">Intro to computer1</a>, <a href="/downloads/intro to computers.pdf">2</a>, <a href="/downloads/ComputerNetworks_936_pages.pdf">computer networks</a>, (<a href="http://ocw.aca.ntu.edu.tw/ntu-ocw/ocw/cou/101S210">ntu ee course</a>)</li>
<li>利用 <a href="https://brython.info/">Brython</a> 學習簡單的 Python 語法. (<a href="https://www.practicepython.org/exercises/">基本程式練習</a>)</li>
</ol>
<p>sort1.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># Python program for implementation of Bubble Sort
# 說明

def bubbleSort(arr):
    n = len(arr)
 
    # Traverse through all array elements
    for i in range(n-1):
    # range(n) also work but outer loop will repeat one time more than needed.
        
        # Last i elements are already in place
        for j in range(n-i-1):
 
            # traverse the array from 0 to n-i-1
            # Swap if the element found is greater
            # than the next element
            if arr[j] &gt; arr[j+1] :
                arr[j], arr[j+1] = arr[j+1], arr[j]
       
        print(str(i+1)+"個已經排好", "共比較"+str(j+1)+"次", arr)
 
# Driver code to test above
arr = [90, 64, 34, 25, 12, 22, 11, 5, 3]
print("original", arr)
bubbleSort(arr)
 
print ("Sorted array is:")
for i in range(len(arr)):
    print ("%d" %arr[i])
</pre>
<p>說明如何在 Github 帳號下利用 "帳號.github.io" 倉儲建立網頁. 基本的建置流程為:</p>
<ol>
<li>登入 Github 帳號</li>
<li>連線至 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a> 後點擊 Use this template, 以此倉儲內容作為樣板, 所建立的倉儲即可透過 Github Pages 的架構, 產生對應的個人網頁</li>
<li>假如再使用 Brython 可以在網頁中建立一個基本的網際 Python 練習頁面</li>
</ol>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/4QMx0_FIGvM" title="YouTube video player" width="560"></iframe></p>
<h4>W10-W17 (若各組分別完成實體與虛擬主機後, 配置 cmstemplate 動靜態網站, 以及 SW, NX, Inventor, 後續可配置以下內容)</h4>
<ol>
<li>網際內容管理應用 I - <a href="https://glowscript.org/">Glowscript</a> (<a href="https://www.glowscript.org/#/user/GlowScriptDemos/folder/Examples/">Examples</a>) (2Weeks)</li>
<li>網際內容管理應用 II - <a href="https://fossil-scm.org">Fossil SCM</a> (2Weeks)</li>
<li>與精密機械有關的主題內容整理 - <a href="http://motion.cs.illinois.edu/RoboticSystems/">Robotics</a> (<a href="/downloads/Intro2Robotics.pdf">Intro2Robotics</a>, <a href="/downloads/IntroToRobotics.pdf">IntroToRobotics</a>), <a href="https://blog.robotiq.com/how-to-calculate-a-robots-forward-kinematics-in-5-easy-steps">Forward kinematics</a>, <a href="https://www.roboticsbusinessreview.com/manufacturing/robot-precision-evolves/">Robot precision evolves</a> (2Weeks)</li>
<li>基本參數 3D 設計繪圖 (<a href="https://solvespace.com">Solvespace</a> and <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a>) 並利用 Python 控制 robot (<a href="https://docs.python.org/3/">Python 3.9</a> and <a href="https://robodk.com/">RoboDK</a>). (2Weeks)</li>
</ol>
<h4>參考資料:</h4>
<p style="padding-left: 30px;">假如想要自行開發類似 RobotDK 的模擬套件 (具備 Python, OpenGL, PyQt5 與 <a href="/downloads/KINEMATIC ANALYSIS FOR ROBOT ARM.pdf">Robotics</a> 相關知識):</p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/RobotSimulator">https://github.com/mdecourse/RobotSimulator</a></p>
<p style="padding-left: 60px;"><a href="http://pyopengl.sourceforge.net/context/tutorials/index.html">http://pyopengl.sourceforge.net/context/tutorials/index.html</a></p>
<p style="padding-left: 60px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-5857-6">Beginning PyQt ebook</a></p>
<p style="padding-left: 60px;"><a href="https://www.glprogramming.com/red/">https://www.glprogramming.com/red/</a></p>
<p style="padding-left: 60px;"><a href="/downloads/robodk/welding/PyOpenGL.pdf">PyOpenGL.pdf</a></p>
<p style="padding-left: 60px;"><a href="/downloads/robodk/welding/learningopengl.pdf">learningopengl.pdf</a></p>
<p style="padding-left: 60px;"><a href="https://stackabuse.com/advanced-opengl-in-python-with-pygame-and-pyopengl/">https://stackabuse.com/advanced-opengl-in-python-with-pygame-and-pyopengl/</a></p>
<p style="padding-left: 60px;"><a href="https://docs.huihoo.com/pyopengl/python-for-opengl.html">https://docs.huihoo.com/pyopengl/python-for-opengl.html</a></p>
<p style="padding-left: 60px;"><a href="https://robodk.com/blog/robot-euler-angles/">https://robodk.com/blog/robot-euler-angles/</a></p>
<p style="padding-left: 60px;">RoboDK API examples: <a href="https://robodk.com/doc/en/PythonAPI/examples.html">https://robodk.com/doc/en/PythonAPI/examples.html</a></p>
<p style="padding-left: 60px;"><a href="/downloads/robodk/welding/2015_Inverse Kinematic Analysis of Robot Manipulators.pdf">2015_Inverse Kinematic Analysis of Robot Manipulators.pdf</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/Pick-And-Place">https://github.com/mdecourse/Pick-And-Place</a></p><h3>Python</h3>
<h4>Python 語法</h4>
<p>由於 Github Pages 不允許伺服 __init__.py 檔案, 因此下列範例中需要導入 ggame 的部分, 將無法在 Github Pages 網站中執行.</p>
<p>Python 3 官方教材: <a href="https://docs.python.org/3/index.html">https://docs.python.org/3/index.html</a></p>
<p>Python tutorial: <a href="https://docs.python.org/3/tutorial/index.html">https://docs.python.org/3/tutorial/index.html</a> (英文)</p>
<p>Python 教學: <a href="https://python-doc-tw.github.io/tutorial/index.html">https://python-doc-tw.github.io/tutorial/index.html</a></p>
<p>網頁上的 Python - Brython: <a href="https://www.brython.info/static_doc/en/intro.html">https://www.brython.info/static_doc/en/intro.html</a> (解譯式)</p>
<p>網頁上的 Python GUI- Flexx: <a href="https://flexx.readthedocs.io/en/stable/">https://flexx.readthedocs.io/en/stable/</a> (轉譯式)</p>
<p>開放電子書:</p>
<p style="padding-left: 30px;"><a href="https://www.liaoxuefeng.com/wiki/1016959663602400">Python 教程</a> (中文)</p>
<p style="padding-left: 30px;"><a href="http://www.pythondoc.com/pythontutorial3/index.html">Python 入門指南</a> (中文)</p>
<p style="padding-left: 30px;"><a href="/downloads/how-to-code-in-python.pdf">how-to-code-in-python.pdf</a> (英文)</p>
<p style="padding-left: 30px;"><a href="https://www.py4e.com/book.php">https://www.py4e.com/book.php</a> (英文與小部分完成中文翻譯)</p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- for ggame -->
<script src="/static/jquery-3.3.1.min.js"></script>
<script src="/static/jquery-ui.1.12.1.min.js"></script>
<script src="/static/pixi-3.0.5.min.js"></script>
<script src="/static/buzz-1.2.1.js"></script>
<script src="/static/bs.js"></script>
<!-- Cango 程式庫 -->
<script src="/static/Cango-13v08-min.js"></script>
<script src="/static/CangoAxes-4v01-min.js"></script>
<script src="/static/gearUtils-05.js"></script>
<!-- for Konva 程式庫 -->
<script src="/static/konva.min.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<h4>開始練習 print() 用法, 並著手建立函式</h4>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">
from browser import document as doc
from browser import html
import ace
# 清除畫布
def clear_bd(ev):
    bd = doc["brython_div"]
    bd.clear()
# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )
Ace.editor.setValue("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword
def helloWorld():
    print("Hello World!")
helloWorld()
# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""")
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)
# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form>
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<div id="brython_div"></div>
<div class="col-md-0" height="1" id="graphics-column" width="1"></div>
<p><!-- ****************************** keyword start -->
<script type="text/python3">
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 kw1
kw1 = beditor.editor("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword
# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "keyword" 的按鈕點按時, 執行 kw1 物件中的 prog 方法
doc["keyword"].bind('click', kw1.prog)
</script>
</p>
<p><!-- ****************************** keyword end --></p>
<p><!-- ***************************** slide ex1 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex1 = beditor.editor("""# 導入 Ex1 原始碼
a = 0
def my_print(n, input_str):
    print("以下將重覆列印 '", input_str + "' " + str(n) + "次")
    for i in range(n):
        print(i, input_str)
my_print(5, "Hello World!")
the_str = "開始學習 Python"
num = input("請輸入要列印的次數!")
my_print(int(num), the_str)
a = a + 1
print("(" + str(a) + ")", "_" * 25)
def myfun():
    yield 1
    yield 2
    yield 3
for i in myfun():
    print(i)
x = iter(myfun())
y = list(myfun())
a = a + 1
print("(" + str(a) + ")", "_" * 25)
print(x.__next__())
print(x.__next__())
print(x.__next__())
print(y)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex1" 的按鈕點按時, 執行 Ex1 物件中的 prog 方法
doc["ex1"].bind('click', Ex1.prog)
</script>
</p>
<p><!-- ***************************** slide ex1 end --></p>
<p><!-- ***************************** slide ex2 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex2 = beditor.editor("""# Python 的內建資料型別
import math
def f():
    print("This is a user-defined function")
    return 42
print("Some basic types in Python:")
print(type(2))           # int
print(type(2.2))         # float
print(type("2.2"))       # str  (string)
print(type(2 < 2.2))     # bool (boolean)
print(type(math))        # module
print(type(math.tan))    # builtin_function_or_method ("function" in Brython)
print(type(f))           # function (user-defined function)
print(type(type(42)))    # type
print("#####################################################")
print("And some other types we will see later in the course...")
print(type(Exception())) # Exception
print(type(range(5)))    # range
print(type([1,2,3]))     # list
print(type((1,2,3)))     # tuple
print(type({1,2}))       # set
print(type({1:42}))      # dict (dictionary or map)
print(type(2+3j))        # complex  (complex number) (we may not see this type)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex2" 的按鈕點按時, 執行 Ex2 物件中的 prog 方法
doc["ex2"].bind('click', Ex2.prog)
</script>
</p>
<p><!-- ***************************** slide ex2 end --></p>
<p><!-- ***************************** slide ex3 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex3 = beditor.editor("""# Python 的內建常數與函式
# 內建常數
print("Some builtin constants:")
print(True)
print(False)
print(None)
print("And some more constants in the math module:")
import math
print(math.pi)
print(math.e)
# 內建函式
print("Type conversion functions:")
print(bool(0))   # convert to boolean (True or False)
print(float(42)) # convert to a floating point number
print(int(2.8))  # convert to an integer (int)
print("And some basic math functions:")
print(abs(-5))   # absolute value
print(max(2,3))  # return the max value
print(min(2,3))  # return the min value
print(pow(2,3))  # raise to the given power (pow(x,y) == x**y)
print(round(2.354, 1)) # round with the given number of digits
# other examples
print(3 * 2)
print(3 * "abc")
print(3 + 2)
print("abc" + "def")
print(3 + "def")
# Type Affect Semantics
print(3 * 2)
print(3 * "abc")
print(3 + 2)
print("abc" + "def")
print(3 + "def")
# Integer Division
print("The / operator does 'normal' float division:")
print(" 5/3  =", ( 5/3))
print()
print("The // operator does integer division:")
print(" 5//3 =", ( 5//3))
print(" 2//3 =", ( 2//3))
print("-1//3 =", (-1//3))
print("-4//3 =", (-4//3))
# Modulus or Remainder Operator (%)
print(" 6%3 =", ( 6%3))
print(" 5%3 =", ( 5%3))
print(" 2%3 =", ( 2%3))
print(" 0%3 =", ( 0%3))
print("-4%3 =", (-4%3))
print(" 3%0 =", ( 3%0))
# Verify that (a%b) is equivalent to (a-(a//b)*b)
def mod(a, b):
  return a - (a//b)*b
print(41%14, mod(41,14))
print(14%41, mod(14,41))
print(-32%9, mod(-32,9))
print(32%-9, mod(32,-9))
# Operator Order (Precedence and Associativity)
print("Precedence:")
print(2+3*4)  # prints 14, not 20
print(5+4%3)  # prints  6, not 0 (% has same precedence as *, /, and //)
print(2**3*4) # prints 32, not 4096 (** has higher precedence than *, /, //, and %)
print()
print("Associativity:")
print(5-4-3)   # prints -2, not 4 (- associates left-to-right)
print(4**3**2) # prints 262144, not 4096 (** associates right-to-left)
# Approximate Values of Floating-Point Numbers
print(0.1 + 0.1 == 0.2)        # True, but...
print(0.1 + 0.1 + 0.1 == 0.3)  # False!
print(0.1 + 0.1 + 0.1)         # prints 0.30000000000000004 (uh oh)
print((0.1 + 0.1 + 0.1) - 0.3) # prints 5.55111512313e-17 (tiny, but non-zero!)
# Equality Testing with math.isclose
print("The problem....")
d1 = 0.1 + 0.1 + 0.1
d2 = 0.3
print(d1 == d2)                # False (never use == with floats!)
print()
print("The solution...")
import math
print(math.isclose(d1, d2))  # True!
# math.isclose checks if the two numbers are ALMOST equal, within a small error
# Short-Circuit Evaluation
def yes():
    return True
def no():
    return False
def crash():
    return 1/0 # crashes!
print(no() and crash()) # Works!
print(crash() and no()) # Crashes!
print (yes() and crash()) # Never runs (due to crash), but would also crash (without short-circuiting)
# Or operator
def yes():
    return True
def no():
    return False
def crash():
    return 1/0 # crashes!
print(yes() or crash()) # Works!
print(crash() or yes()) # Crashes!
print(no() or crash())  # Never runs (due to crash), but would also crash (without short-circuiting)
# more examples
def isPositive(n):
    result = (n > 0)
    print("isPositive(",n,") =", result)
    return result
def isEven(n):
    result = (n % 2 == 0)
    print("isEven(",n,") =", result)
    return result
print("Test 1: isEven(-4) and isPositive(-4))")
print(isEven(-4) and isPositive(-4)) # Calls both functions
print("----------")
print("Test 2: isEven(-3) and isPositive(-3)")
print(isEven(-3) and isPositive(-3)) # Calls only one function!
# type vs isinstance
# Both type and isinstance can be used to type-check
# In general, (isinstance(x, T)) will be more robust than (type(x) == T)
print(type("abc") == str)
print(isinstance("abc", str))
# We'll see better reasons for this when we cover OOP + inheritance later
# in the course.  For now, here is one reason:  say you wanted to check
# if a value is any kind of number (int, float, complex, etc). 
# You could do:
def isNumber(x):
    return ((type(x) == int) or
            (type(x) == float)) # are we sure this is ALL kinds of numbers?
print(isNumber(1), isNumber(1.1), isNumber(1+2j), isNumber("wow"))
# But this is cleaner, and works for all kinds of numbers, including
# complex numbers for example:
import numbers
def isNumber(x):
    return isinstance(x, numbers.Number) # works for any kind of number
print(isNumber(1), isNumber(1.1), isNumber(1+2j), isNumber("wow"))
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex3" 的按鈕點按時, 執行 Ex3 物件中的 prog 方法
doc["ex3"].bind('click', Ex3.prog)
</script>
</p>
<p><!-- ***************************** slide ex3 end --></p>
<p><!-- ***************************** slide ex4 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex4 = beditor.editor("""# Python 函式
# Vocabulary
x = 5
def f(y, z):
    result = x + y + z
    return result
print(f(1, 2)) # 8
print(f(3, 4)) # 12
# Vocabulary:
#   variables: global vs. local
#   statements vs. expressions
#   function definitions vs. function calls
#   parameters vs. arguments
# Return Statements
# Basic example
def isPositive(x):
    return (x > 0)
print(isPositive(5))  # True
print(isPositive(-5)) # False
print(isPositive(0))  # False
# Return ends the function immediately
def isPositive(x):
    print("Hello!")   # runs
    return (x > 0)
    print("Goodbye!") # does not run ("dead code")
print(isPositive(5))  # prints Hello, then True
# No return statement --> return None
def f(x):
    x + 42
print(f(5)) # None
def f2(x):
    result = x + 42
print(f2(5)) # None
# Print versus Return
# This is a common early mistake (confusing print and return):
def cubed(x):
    print(x**3) # Here is the error!
cubed(2)          # seems to work!
print(cubed(3))   # sort of works (but prints None, which is weird)
print(2*cubed(4)) # Error!
# Once again (correctly)
def cubed2(x):
    return (x**3) # That's better!
cubed2(2)          # seems to be ignored (why?)
print(cubed2(3))   # works!
print(2*cubed2(4)) # works!
# Different Parameter and Return Types
def hypotenuse(a, b):
    return ((a**2) + (b**2))**0.5
print(hypotenuse(3, 4)) # 5.0 (not 5)
print("---------------------")
def xor(b1, b2):
    return ((b1 and (not b2)) or (b2 and (not b1)))  # same as (b1 != b2)
print(xor(True,  True))  # False
print(xor(True,  False)) # True
print(xor(False, True))  # True
print(xor(False, False)) # False
print("---------------------")
def isPositive(n):
    return (n > 0)
print(isPositive(10))     # True
print(isPositive(-1.234)) # False
# Function Composition
def f(w):
    return 10*w
def g(x, y):
    return f(3*x) + y
def h(z):
    return f(g(z, f(z+1)))
print(h(1)) # hint: try the "visualize" feature
# Helper Functions 
def onesDigit(n):
    return n%10
def largerOnesDigit(x, y):
    return max(onesDigit(x), onesDigit(y))
print(largerOnesDigit(134, 672)) # 4
print(largerOnesDigit(132, 674)) # Still 4
# Test Functions
# A broken test function
def onesDigit(n):
    return n%10
def testOnesDigit():
    print("Testing onesDigit()...", end="")
    assert(onesDigit(5) == 5)
    assert(onesDigit(123) == 3)
    assert(onesDigit(100) == 0)
    assert(onesDigit(999) == 9)
    print("Passed!")
testOnesDigit() # Passed!  Why is this bad?
# A better version
def onesDigit2(n):
    return n%10
def testOnesDigit2():
    print("Testing onesDigit()...", end="")
    assert(onesDigit2(5) == 5)
    assert(onesDigit2(123) == 3)
    assert(onesDigit2(100) == 0)
    assert(onesDigit2(999) == 9)
    assert(onesDigit2(-123) == 3) # Added this test
    print("Passed!")
testOnesDigit2() # Crashed!  So the test function worked!
# Local Variable Scope
def f(x):
    print("In f, x =", x)
    x += 5
    return x
def g(x):
    return f(x*2) + f(x*3)
print(g(2))
# Another example
def f(x):
    print("In f, x =", x)
    x += 7
    return round(x / 3)
def g(x):
    x *= 10
    return 2 * f(x)
def h(x):
    x += 3
    return f(x+4) + g(x)
print(h(f(1)))
# Global Variable Scope
# In general, you should avoid using global variables.
# You will even lose style points if you use them!
# Still, you need to understand how they work, since others
# will use them, and there may also be some very few occasions
# where you should use them, too!
g = 100
def f(x):
    return x + g
print(f(5)) # 105
print(f(6)) # 106
print(g)    # 100
# Another exampl
g = 100
def f(x):
    # If we modify a global variable, we must declare it as global.
    # Otherwise, Python will assume it is a local variable.
    global g
    g += 1
    return x + g
print(f(5)) # 106
print(f(6)) # 108
print(g)    # 102
# Default arguments
# Sometimes, a function has a parameter that has a natural default
# We can specify that default value in the function definition,
# then choose whether or not to include it in the function call.
def f(x, y=10):
    return x + y
print(f(5))   # 15
print(f(5,1)) # 6
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex4" 的按鈕點按時, 執行 Ex4 物件中的 prog 方法
doc["ex4"].bind('click', Ex4.prog)
</script>
</p>
<p><!-- ***************************** slide ex4 end --></p>
<!-- line drawing start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Draw = beditor.editor("""# Line drawing
# 導入 doc
from browser import document as doc
from browser import html
import math
canvas = html.CANVAS(width = 300, height = 200)
canvas.id = "line_drawing"
brython_div = doc["brython_div"]
brython_div <= canvas
# 準備繪圖畫布
canvas = doc["line_drawing"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
# 設定填圖顏色
ctx.fillStyle = "rgb(200,0,0)"
# 設定畫筆顏色
ctx.strokeStyle = "rgb(0,0,200)"
# 乘上 deg 可轉為徑度單位
deg = math.pi / 180
# 建立多邊形定點位置畫線函式
def star(radius, xc, yc, n):
    #radius = 100
    #xc = 200
    #yc = 200
    xi = xc + radius*math.cos((360/n)*deg+90*deg)
    yi = yc - radius*math.sin((360/n)*deg+90*deg)
    ctx.beginPath()
    ctx.moveTo(xi,yi)
    for i in range(2, n+1):
        x = xc + radius*math.cos((360/n)*deg*i+90*deg)
        y = yc - radius*math.sin((360/n)*deg*i+90*deg)
        ctx.lineTo(x,y)
# 以下利用多邊形畫線函式呼叫執行畫框線或填入顏色
# 畫五邊形框線
star(50, 50, 50, 5)
ctx.closePath()
ctx.stroke()
    
# 填三角形色塊
star(50, 150, 50, 3)
ctx.closePath()
ctx.fill()
    
# 改變畫線顏色後, 畫七邊形框線
ctx.strokeStyle = "rgb(0,200,20)"
star(50, 250, 50, 7)
ctx.closePath()
ctx.stroke()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "draw" 的按鈕點按時, 執行 Draw 物件中的 prog 方法
doc["draw"].bind('click', Draw.prog)
</script>
</p>
<!-- line drawing ends -->
<p></p>
<!-- flag ex start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Flag = beditor.editor("""# 畫中華民國國旗
# 導入 doc
from browser import document as doc
from browser import html
import math
canvas = html.CANVAS(width = 300, height = 200)
canvas.style = {"width": "100%"}
canvas.id = "taiwan_flag"
brython_div = doc["brython_div"]
brython_div <= canvas
# 準備繪圖畫布
canvas = doc["taiwan_flag"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "flag" 的按鈕點按時, 執行 Flag 物件中的 prog 方法
doc["flag"].bind('click', Flag.prog)
</script>
</p>
<!-- flag ex ends -->
<p></p>
<!-- bunny start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Bunny = beditor.editor("""# Ggame
from ggame import App, ImageAsset, Sprite, MouseEvent
from random import random, randint
from browser import document as doc
from browser import html
import math
# 引入既有的id="graphics-column" 標註
graphics_column = doc["graphics-column"]
# 建立內定名稱為 "ggame-canvas" 的 canvas 標註
canvas = html.CANVAS(width = 600, height = 400)
canvas.id = "ggame-canvas"
# 將 canvas 插入 gc 標註中
graphics_column <= canvas
class Bunny(Sprite):
    
    asset = ImageAsset("/images/bunny.png")
    
    def __init__(self, position):
        super().__init__(Bunny.asset, position)
        # register mouse events
        App.listenMouseEvent(MouseEvent.mousedown, self.mousedown)
        App.listenMouseEvent(MouseEvent.mouseup, self.mouseup)
        App.listenMouseEvent(MouseEvent.mousemove, self.mousemove)
        self.dragging = True
        self.deltax = 0
        self.deltay = 0
    
    def step(self):
        # Every now and then a bunny hops...
        if random() < 0.01:
            self.x += randint(-20,20)
            self.y += randint(-20,20)
        
        
    def mousedown(self, event):
        # capture any mouse down within 50 pixels
        self.deltax = event.x - (self.x + self.width//2) 
        self.deltay = event.y - (self.y + self.height//2)
        if abs(self.deltax) < 50 and abs(self.deltay) < 50:
            self.dragging = True
            # only drag one bunny at a time - consume the event
            event.consumed = True
            
    def mousemove(self, event):
        if self.dragging:
            self.x = event.x - self.deltax - self.width//2
            self.y = event.y - self.deltay - self.height//2
            event.consumed = True
            
    def mouseup(self, event):
        if self.dragging:
            self.dragging = False
            event.consumed = True
            
        
class DemoApp(App):
    
    def __init__(self):
        super().__init__()
        for i in range(5):
            Bunny((randint(50, 600), randint(50, 400)))
        
    def step(self):
        # Override step to perform action on each frame update
        for bunny in self.spritelist:
            bunny.step()
# Create the app
app = DemoApp()  
# Run the app
app.run()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "bunny" 的按鈕點按時, 執行 Bunny 物件中的 prog 方法
doc["bunny"].bind('click', Bunny.prog)
</script>
</p>
<!-- bunny ends -->
<p></p>
<!-- clear canvas start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Clear = beditor.editor("""# 清除畫布
from browser import document, html
brython_div = document["brython_div"] 
brython_div.clear()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "clear" 的按鈕點按時, 執行 Clear 物件中的 prog 方法
doc["clear"].bind('click', Clear.prog)
</script>
</p>
<!-- clear canvas ends -->
<p></p>
<!-- cango spur gears start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Spur = beditor.editor("""# Cango Spur Gears
from browser import document as doc
from browser import html
import math
canvas = html.CANVAS(width = 600, height = 400)
canvas.id = "cango_gear"
brython_div = doc["brython_div"]
brython_div <= canvas
from browser import document as doc
from browser import window
import math
canvas = doc["cango_gear"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
#ctx = canvas.getContext("2d")
cango = window.Cango.new
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
shape = window.Shape.new
path = window.Path.new
creategeartooth = window.createGearTooth.new
tweener = window.Tweener.new
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")
######################################
# 畫正齒輪輪廓
#####################################
def cangoGear(n, m, pa):
    # n 為齒數
    #n = 17
    # pa 為壓力角
    #pa = 25
    # m 為模數, 根據畫布的寬度, 計算適合的模數大小
    # Module = mm of pitch diameter per tooth
    #m = 0.8*canvas.width/n
    # pr 為節圓半徑
    pr = n*m/2 # gear Pitch radius
    # generate gear
    data = creategeartooth(m, n, pa)
    # Brython 程式中的 print 會將資料印在 Browser 的 console 區
    #print(data)
    gearTooth = path(data, {
      "fillColor":"#ddd0dd",
      "border": True,
      "strokeColor": "#606060" })
    gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
    # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
    gear = gearTooth.dup()
    # gear 為單一齒的輪廓資料
    #cgo.render(gearTooth)
    # 利用單齒輪廓旋轉, 產生整個正齒輪外形
    for i in range(1, n):
        # 將 gearTooth 中的資料複製到 newTooth
        newTooth = gearTooth.dup()
        # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
        newTooth.rotate(360*i/n)
        gear.appendPath(newTooth)
    # 建立軸孔
    # add axle hole, hr 為 hole radius
    hr = 0.6*pr # diameter of gear shaft
    shaft = path(shapedefs.circle(hr), {
      "fillColor":"#ddd0dd",
      "border": True,
      "strokeColor": "#606060" })
    gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path
    return gear
# 設定兩齒齒數
n1 = 17
n2 = 11
n3 = 13
reduced_ratio = 0.5
# 使用 80% 的畫布寬度
m = 0.8*canvas.width/((n1+n2+n3)*reduced_ratio)
# 設定共同的壓力角
pa = 25
# n 齒輪的節圓半徑
pr1 = n1*m/2
# n2 齒輪的節圓半徑
pr2 = n2*m/2
pr3 = n3*m/2
cx = canvas.width/2
cy = canvas.height/2
# 建立 gears
gear1 = cangoGear(n1, m, pa)
gear2 = cangoGear(n2, m, pa)
gear3 = cangoGear(n3, m, pa)
from browser.timer import set_interval
deg = math.pi/180
rotate_speed = 12*deg
def draw():
    cgo.clearCanvas()
    gear1.transform.translate(cx-(pr1+pr2)*reduced_ratio, cy)
    gear1.transform.scale(reduced_ratio)
    gear1.transform.rotate(0)
    gear1.rotate(rotate_speed)
    cgo.render(gear1)
    
    gear2.transform.translate(cx, cy)
    gear2.transform.scale(reduced_ratio)
    gear2.transform.rotate(180+(360/n2/2))
    gear2.rotate(-(rotate_speed)*n1/n2)
    cgo.render(gear2)
    
    gear3.transform.translate(cx+(pr2+pr3)*reduced_ratio, cy)
    gear3.transform.scale(reduced_ratio)
    gear3.transform.rotate(180+(360/n3/2)+(180+(360/n2/2))*n2/n3)
    gear3.rotate((rotate_speed*n1/n2)*(n2/n3))
    cgo.render(gear3)
set_interval(draw, 2)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "spur" 的按鈕點按時, 執行 Spur 物件中的 prog 方法
doc["spur"].bind('click', Spur.prog)
</script>
</p>
<!-- cango spur gears ends -->
<p></p>
<!-- temp convert start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Temp = beditor.editor("""# Temperature Conversion
# Temperature Conversion
'''
C to F: Celsius to Fahrenheit Conversion Formula. To convert temperatures in degrees Celsius to Fahrenheit, multiply by 1.8 (or 9/5) and add 32.
To convert temperatures in degrees Fahrenheit to Celsius, subtract 32 and multiply by .5556 (or 5/9).
Fahrenheit = Celsius*9/5 + 32
Celsium = (Fahrenheit - 32)*5/9
'''
from browser import document, html
brython_div = document["brython_div"]
def c2f(c):
    f = round(c*9/5 + 32, 3)
    return "Celsiusc: "+ str(c) +         " degrees = Fahrenheit: " + str(f) + " degrees"
    
def f2c(f):
    c = round((f - 32)*5/9, 3)
    return "Fahrenheit: "+ str(f) +         " degrees = Celsiusc: " + str(c) + " degrees"
    
choice = input("c2f or f2c")
if choice == "c2f":
    '''
    c = float(input("input Celsius in degrees"))
    print(c2f(c))
    '''
    for deg in range(100):
        brython_div <= c2f(deg)
        brython_div <= html.BR()
else:
    '''
    f = float(input("input Fahrenheit in degrees"))
    print(f2c(f))
    '''
    for deg in range(100):
        brython_div <= f2c(deg)
        brython_div <= html.BR()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "temp" 的按鈕點按時, 執行 Temp 物件中的 prog 方法
doc["temp"].bind('click', Temp.prog)
</script>
</p>
<!-- temp convert ends -->
<p></p>
<!-- forloop start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Forloop = beditor.editor("""# For loop
for i in range(5):
    print(i)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "forloop" 的按鈕點按時, 執行 Forloop 物件中的 prog 方法
doc["forloop"].bind('click', Forloop.prog)
</script>
</p>
<!-- forloop ends -->
<p></p>
<!-- guess start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Guess = beditor.editor("""# 猜數字遊戲
from browser import document, html, alert
import random
# 跳出文字說明視窗
alert("開始玩猜數字遊戲")
# 利用 random 模組中的 randint 取 1~100 間的亂數
標準答案 = random.randint(1, 100)
# 利用 input 函式視窗, 取使用者所猜的數字, 轉為整數
你猜的數字 = int(input("請輸入您所猜 1~100 間的整數:"))
# 猜測次數起始值設為 1
猜測次數 = 1
# 進入重複迴圈, 直到猜對數字
while 標準答案 != 你猜的數字:
    # 根據使用者所猜的數字, 與答案比較後, 給出提示
    if 標準答案 < 你猜的數字:
        alert("猜第" + str(猜測次數) + "次, 太大了，再猜 :)加油")
    else:
        alert("猜第" + str(猜測次數) + "次, 太小了，再猜 :)加油")
    你猜的數字 = int(input("請輸入您所猜 1~100 間的整數:"))
    # 猜測次數累加
    猜測次數 += 1
# 跳出迴圈表示猜對, 給出最後文字說明視窗
alert("猜對了！答案為" + str(標準答案) + ", 總共猜了" + str(猜測次數) + "次")
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "guess" 的按鈕點按時, 執行 Guess 物件中的 prog 方法
doc["guess"].bind('click', Guess.prog)
</script>
</p>
<!-- guess ends -->
<p></p>
<!-- autoguess start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Autoguess = beditor.editor("""# 程式自動猜數字遊戲
from browser import document, html, alert
import random
 
id4 = document["brython_div"]
執行次數 = 100
總猜測次數 = 0
for i in range(執行次數):
    id4 <= "第" + str(i+1) + "次玩:" + html.BR()
    下限 = 1
    上限 = 100
    標準答案 = random.randint(下限, 上限)
    pc猜的數字 = random.randint(下限, 上限)
    #print(標準答案, pc猜的數字)
    #integer int()
    #string str()
    #float float()
    #你猜的數字 = int(input("請輸入您所猜的整數:"))
    猜測次數 = 1
    while 標準答案 != pc猜的數字:
        if 標準答案 < pc猜的數字:
            #print("太大了，再猜一次 :)加油")
            # 因此已經確定"pc猜的數字"不是答案, 因此 - 1
            id4 <= "電腦猜的數字:" + str(pc猜的數字) + " 太大了!" + html.BR()
            上限 = pc猜的數字 - 1
        else:
            #print("太小了，再猜一次 :)加油")
            # 因此已經確定"pc猜的數字"不是答案, 因此 + 1
            id4 <= "電腦猜的數字:" + str(pc猜的數字) + " 太小了!" + html.BR()
            下限 = pc猜的數字 + 1
        #pc猜的數字 = int(input("請輸入您所猜的整數:"))
        pc猜的數字 = random.randint(下限, 上限)
        猜測次數 += 1
    #print("猜對了！總共猜了", 猜測次數, "次")
    id4 <= "電腦猜對了, 答案為: " + str(標準答案) + ", 總共猜了 "+ str(猜測次數) + "次" + html.BR()
    總猜測次數 += 猜測次數
平均猜測次數 = int(總猜測次數/執行次數)
#print("平均次數", 平均猜測次數)
id4 <= "平均次數: " + str(平均猜測次數)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "autoguess" 的按鈕點按時, 執行 Autoguess 物件中的 prog 方法
doc["autoguess"].bind('click', Autoguess.prog)
</script>
</p>
<!-- autoguess ends -->
<p></p>
<!-- lottery start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Lottery = beditor.editor("""# 大樂透電腦選號
# lottery
from browser import document, html, alert
import random
try:
    total = int(input("請問要出幾張大樂透彩卷號碼?"))
except:
    alert("請輸入要選擇大樂透電腦選號數量的'整數'")
    total = int(input("請問要出幾張大樂透彩卷號碼?"))
# 準備將電腦選出的號碼, 輸出到內定 id="brython_div" 的標註區域
output_div = document["brython_div"]
output_div <= "以下將出 " + str(total) + " 張電腦選號彩卷:" + html.BR()
for i in range(1, total + 1):
    # 利用 list(range()) 產生 1 到 49 的 population list
    # 然後再透過 random.sample(population, k) 
    # 從 population, 產生 k 個不同的數字
    numbers = random.sample(list(range(1, 49)), 6)
    output_div <= str(i) + ". 電腦選號為: " + str(numbers) + html.BR()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "lottery" 的按鈕點按時, 執行 Lottery 物件中的 prog 方法
doc["lottery"].bind('click', Lottery.prog)
</script>
</p>
<!-- lottery ends -->
<p></p>
<!-- 台灣威力彩 start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Weleadlottery = beditor.editor("""# 威力彩電腦選號
# weleadlottery
from browser import document, html, alert
import random
try:
    total = int(input("請問要出幾張威力彩卷號碼?"))
except:
    alert("請輸入要選擇威力彩電腦選號數量的'整數'")
    total = int(input("請問要出幾張威力彩卷號碼?"))
# 準備將電腦選出的號碼, 輸出到內定 id="brython_div" 的標註區域
output_div = document["brython_div"]
output_div <= "以下將出 " + str(total) + " 張威力彩電腦選號彩卷:" + html.BR()
for i in range(1, total + 1):
    # 利用 list(range()) 產生第一區 1 到 38 , 第二區 1 到 8 的 population list
    # 然後再透過 random.sample(population, k) 
    # 從 population, 產生 k 個不同的數字
    section1_numbers = random.sample(list(range(1, 38)), 6)
    section2_number = random.sample(list(range(1, 8)), 1)
    output_div <= str(i) + ". 電腦選號第一區為: " + str(section1_numbers) + html.BR()
    output_div <= ". 電腦選號第二區為: " + str(section2_number) + html.BR()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "lottery" 的按鈕點按時, 執行 Lottery 物件中的 prog 方法
doc["weleadlottery"].bind('click', Weleadlottery.prog)
</script>
</p>
<!-- 台灣威力彩 ends -->
<p></p>
<!-- bezier starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Bezier = beditor.editor("""# Cango Bezier 繪圖
from browser import window, html
from browser import document as doc
canvas = html.CANVAS(width = 600, height = 400)
canvas.id = "canvas"
brython_div = doc["brython_div"]
brython_div <= canvas
# Javascript 物件
cango = window.Cango.new
path = window.Path.new
shape = window.Shape.new
group = window.Group.new
# Javascript 變數
shapedefs = window.shapeDefs
g1 = cango("canvas")
g1.clearCanvas()
g1.gridboxPadding(10, 10, 5, 7)
g1.fillGridbox("lightgreen")
g1.setWorldCoordsRHC(-100, -100, 400)
x1 = 40
y1 = 20
cx1 = 90
cy1 = 120
x2 = 120
y2 = 100
cx2 = 130
cy2 = 20
cx3 = 150
cy3 = 120
x3 = 180
y3 = 60
def dragC1(mousePos):
    global cx1, cy1
    cx1 = mousePos.x
    cy1 = mousePos.y
    drawCurve()
def dragC2(mousePos):
    global cx2, cy2
    cx2 = mousePos.x
    cy2 = mousePos.y
    drawCurve()
def dragC3(mousePos):
    global cx3, cy3
    cx3 = mousePos.x
    cy3 = mousePos.y
    drawCurve()
def drawCurve():
    qbez = path(['M', x1, y1, 'Q', cx1, cy1, x2, y2], {
      'strokeColor':'blue'})
    cbez = path(['M', x2, y2, 'C', cx2, cy2, cx3, cy3, x3, y3], {
      'strokeColor':'green'})
    L1 = path(['M', x1, y1, 'L', cx1, cy1, x2, y2], {
      'strokeColor':"rgba(0, 0, 0, 0.2)",
      'dashed':[4]})
    L2 = path(['M', x2, y2, 'L', cx2, cy2], {
      'strokeColor':"rgba(0, 0, 0, 0.2)",
      'dashed':[4]})
    L3 = path(['M', x3, y3, 'L', cx3, cy3], {
      'strokeColor':"rgba(0, 0, 0, 0.2)",
      'dashed':[4]})
    c1.transform.translate(cx1, cy1)
    c2.transform.translate(cx2, cy2)
    c3.transform.translate(cx3, cy3)
    grp = group(qbez, cbez, L1, L2, L3, c1, c2, c3)
    g1.render(grp, True)
g1.clearCanvas("lightyellow")
g1.deleteAllLayers()
g1.setWorldCoordsRHC(0, 0, 200)
c1 = shape(shapedefs.circle(6), {'fillColor':'red'})
c1.enableDrag(None, dragC1, None)
c2 = shape(shapedefs.circle(6), {'fillColor':'red'})
c2.enableDrag(None, dragC2, None)
c3 = shape(shapedefs.circle(6), {'fillColor':'red'})
c3.enableDrag(None, dragC3, None);
drawCurve()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "bezier" 的按鈕點按時, 執行 Bezier 物件中的 prog 方法
doc["bezier"].bind('click', Bezier.prog)
</script>
</p>
<!-- bezier ends -->
<p></p>
<!-- turtle1 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle1 = beditor.editor("""# Turtle1 繪圖
from browser import window, html
from browser import document as doc
import turtle
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
t = turtle.Turtle()
t.width(5)
for c in ['red', '#00ff00', '#fa0', 'rgb(0,0,200)']:
    t.color(c)
    t.forward(100)
    t.left(90)
# dot() and write() do not require the pen to be down
t.penup()
t.goto(-30, -100)
t.dot(40, 'rgba(255, 0, 0, 0.5')
t.goto(30, -100)
t.dot(40, 'rgba(0, 255, 0, 0.5')
t.goto(0, -70)
t.dot(40, 'rgba(0, 0, 255, 0.5')
t.goto(0, 125)
t.color('purple')
t.write("這就是 Brython, 網頁上的 Python", font=("Arial", 15, "normal"))
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle1" 的按鈕點按時, 執行 Turtle1 物件中的 prog 方法
doc["turtle1"].bind('click', Turtle1.prog)
</script>
</p>
<!-- turtle1 ends -->
<p></p>
<!-- turtle2 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle2 = beditor.editor("""# Turtle2 繪圖
from browser import document as doc
import turtle
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
star = turtle.Turtle()
for i in range(5):
    star.forward(250)
    star.right(144)
    
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle2" 的按鈕點按時, 執行 Turtle2 物件中的 prog 方法
doc["turtle2"].bind('click', Turtle2.prog)
</script>
</p>
<!-- turtle2 ends -->
<p></p>
<!-- turtle3 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle3 = beditor.editor("""# Turtle3 繪圖
# https://michael0x2a.com/blog/turtle-examples
from browser import document as doc
import turtle
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
painter = turtle.Turtle()
painter.pencolor("blue")
for i in range(50):
    painter.forward(50)
    painter.left(123) # Let's go counterclockwise this time 
    
painter.pencolor("red")
for i in range(50):
    painter.forward(100)
    painter.left(123)
    
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle3" 的按鈕點按時, 執行 Turtle3 物件中的 prog 方法
doc["turtle3"].bind('click', Turtle3.prog)
</script>
</p>
<!-- turtle3 ends -->
<p></p>
<!-- turtle4 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle4 = beditor.editor("""# Turtle4 繪圖
# https://docs.python.org/3.7/library/turtle.html?highlight=turtle
# https://fiftyexamples.readthedocs.io/en/latest/turtle.html
from browser import document as doc
import turtle
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
# 輸入 "turtle" 字串, 表示要使用內建的烏龜圖示
t = turtle.Turtle("turtle")
# 設定繪圖尺寸
screen_x = 500-20
screen_y = 300
# 提筆, 將烏龜移動到畫布中心
t.penup()
t.home()
# 內定方向為右, 前進 screen_x/2
t.forward(screen_x / 2)
# 將方向往右轉 90 度
t.right(90)
# 此時方向向下, 前進 screen_y/2
t.forward(screen_y / 2)
# 令烏龜方向轉絕對角度 180, 等同轉相對角度 90 度, 即 t.right(90)
t.setheading(180)
# 將畫筆顏色設為紅色
t.pencolor('red')
# 下筆準備繪圖
t.pendown()
# 設筆寬度為 10
t.pensize(10)
# 進入重複迴圈, 此時方向向右, 分別
# 前進 screen_x, 之後轉 90 度, 方向朝上
# 再前進 screen_y, 之後再轉 90 度, 方向朝右
# 再前進 screen_x, 之後轉 90 度, 方向朝下
# 最後再前進 screen_y 後, 將方向轉為向左
for distance in (screen_x, screen_y, screen_x, screen_y):
    t.forward(distance)
    t.right(90)
# 提筆後, 將烏龜轉回內定方向回到畫布中心
t.penup()
t.home()
# 完成 turtle 繪圖
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle4" 的按鈕點按時, 執行 Turtle4 物件中的 prog 方法
doc["turtle4"].bind('click', Turtle4.prog)
</script>
</p>
<!-- turtle4 ends -->
<p></p>
<!-- turtle5 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle5 = beditor.editor("""# Turtle5 繪圖
# https://brython.info/gallery/turtle.html
from browser import document as doc
import turtle
import math
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
t = turtle.Turtle("turtle")
t.speed(1)
t.forward(50)
print("Should be (50, 0):", t.position())
print("Should be 50: ", t.xcor())
print("Should be 0: ", t.ycor())
t.left(90)
t.color("blue")
t.speed(2)
t.fd(50)
print("Should be (50, 50):", t.pos())
print("Should be 225: ", t.towards(0, 0))
print("Should be 90: ", t.heading())
print("Should be approximately 71:", t.distance(0, 0))
# Draw the same square in three different angle modes
t.width(4)
print("Drawing using degrees - the default")
print("Heading should be 90: ", t.heading())
for i in range(4):
    t.forward(100)
    t.left(90)
print("Drawing using radians")
t.radians()
print("Heading should be pi/2: ", t.heading())
for i in range(4):
    t.forward(100)
    t.left(math.pi/2)
print("Drawing using gradients")
t.degrees(400)
print("Heading should be 100: ", t.heading())
for i in range(4):
    t.forward(100)
    t.left(100)
t.degrees()
t.width(1)
t.lt(90)
t.color("orange")
t.backward(50)
t.right(90)
t.color("green")
t.back(50)
t.rt(90)
t.color("red")
t.bk(50)
t.stamp()
t.speed(4)
t.color("black", "white")
t.goto(-100, 100)
t.stamp()
t.color("blue", "yellow")
t.setposition(0, 100)
t.stamp()
t.color("green", "white")
t.setpos(100, 100)
t.stamp()
t.speed(10)
t.color("orange")
t.sety(-100)
t.setx(-100)
t.stamp()
t.color("cyan")
t.home()
t.stamp()
t.color("green")
t.width(4)
t.setheading(180)
t.forward(150)
t.seth(90)
t.fd(20)
t.dot(30, "rgba(255, 0, 0, 0.2)")
t.color("red")
t.speed(0)
t.forward(30)
t.left(90)
t.circle(30)
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle5" 的按鈕點按時, 執行 Turtle5 物件中的 prog 方法
doc["turtle5"].bind('click', Turtle5.prog)
</script>
</p>
<!-- turtle5 ends -->
<p></p>
<!-- turtle6 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle6 = beditor.editor("""# Turtle6 繪圖
from browser import document as doc
import turtle
import math
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
t = turtle.Turtle("turtle")
t.speed(10)
colors = ['red', 'purple', 'blue', 'green', 'orange']
for x in range(150):
    t.pencolor(colors[x % 5])
    t.width(x/10 + 1)
    t.forward(x)
    t.left(59)
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle6" 的按鈕點按時, 執行 Turtle6 物件中的 prog 方法
doc["turtle6"].bind('click', Turtle6.prog)
</script>
</p>
<!-- turtle6 ends -->
<p></p>
<!-- turtle7 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle7 = beditor.editor("""# Turtle7 繪圖
from browser import document as doc
import turtle
import math
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
screen=turtle.Screen()    #making a canvas for drawing
screen.bgcolor('black')    #making canvas black
trtl=turtle.Turtle()  #making a turtle
trtl.pencolor('red')    #making colour of the pen red
trtl.pensize(5)    #choosing the size of pen nib 
trtl.speed(10)    #choosing the speed of drawing
# shape should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’
trtl.shape('turtle')   #choosing the shape of pen nib
trtl.forward(150)    #drawing a line of 150 pixels
trtl.right(90)    #asking turtle to turn 90 degrees
trtl.forward(150)    #drawing a line of 150 pixels
trtl.penup()    # preparing for moving pen without drawing
trtl.setpos(-140,-120)    # making the new position of the turtle
trtl.pendown()   # bringing the pen down for drawing again
trtl.pencolor('green')    # choosin the pen colour as green
trtl.write('Brython 烏龜繪圖', font=("Arial", 20, "bold"))    # chosing the font
trtl.penup()
trtl.ht()    # hiding the turtle from the screen
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle7" 的按鈕點按時, 執行 Turtle7 物件中的 prog 方法
doc["turtle7"].bind('click', Turtle7.prog)
</script>
</p>
<!-- turtle7 ends -->
<p></p>
<!-- turtle8 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle8 = beditor.editor("""# Turtle8 繪圖
from browser import document as doc
import turtle
import math
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
wn = turtle.Screen() 
wn.bgcolor("black") 
skk = turtle.Turtle() 
skk.speed(10)
skk.shape("circle")
skk.color("blue") 
  
def sqrfunc(size): 
    for i in range(4): 
        skk.fd(size) 
        skk.left(90) 
        size = size-5
  
sqrfunc(146) 
sqrfunc(126) 
sqrfunc(106) 
sqrfunc(86) 
sqrfunc(66) 
sqrfunc(46) 
sqrfunc(26) 
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle8" 的按鈕點按時, 執行 Turtle8 物件中的 prog 方法
doc["turtle8"].bind('click', Turtle8.prog)
</script>
</p>
<!-- turtle8 ends -->
<p></p>
<!-- konva1 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Konva1 = beditor.editor("""# Konva1 繪圖
# 引用 https://konvajs.github.io/ 繪圖
from browser import document, html, window
width = 600
height = 400
konva = window.Konva
# Konva 必須在 canvas 繪圖, 從上方設定,  canvas id 為 "container"
stage = konva.Stage.new({
        "container": 'brython_div',
        "width": width,
        "height": height
    })
layer = konva.Layer.new()
rectX = stage.getWidth() / 2 - 50
rectY = stage.getHeight() / 2 - 25
box = konva.Rect.new({
        "x": rectX,
        "y": rectY,
        "width": 100,
        "height": 50,
        "fill": '#00D2FF',
        "stroke": 'black',
        "strokeWidth": 4,
        "draggable": True
    })
def f1():
    document.body.style.cursor = 'pointer'
    
def f2():
    document.body.style.cursor = 'default'
# add cursor styling
box.on('mouseover', f1())
box.on('mouseout', f2())
layer.add(box)
stage.add(layer)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "konva1" 的按鈕點按時, 執行 Konva1 物件中的 prog 方法
doc["konva1"].bind('click', Konva1.prog)
</script>
</p>
<!-- konva1 ends -->
<p></p>
<!-- ycqsort starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ycqsort = beditor.editor("""# Ycombinator quicksort example
Y = lambda f: lambda *args: f(Y(f))(*args)
quicksort = Y(lambda f:
    lambda x: (
        f([item for item in x if item < x[0]])
        + [y for y in x if x[0] == y]
        + f([item for item in x if item > x[0]])
    ) if x else [])
    
print(quicksort([1, 3, 5, 4, 1, 3, 2]))
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ycqsort" 的按鈕點按時, 執行 Ycqsort 物件中的 prog 方法
doc["ycqsort"].bind('click', Ycqsort.prog)
</script>
</p>
<!-- ycqsort ends -->
<p></p>
<!-- ball starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ball = beditor.editor("""# Ggame ball example
from ggame import (
    App, 
    Color, 
    LineStyle, 
    Sprite, 
    RectangleAsset, 
    ImageAsset,
    CircleAsset, 
    EllipseAsset, 
    PolygonAsset,
)
from browser import document as doc
from browser import html
# 引入既有的id="graphics-column" 標註
graphics_column = doc["graphics-column"]
# 建立內定名稱為 "ggame-canvas" 的 canvas 標註
canvas = html.CANVAS(width = 600, height = 100)
canvas.id = "ggame-canvas"
# 將 canvas 插入 gc 標註中
graphics_column <= canvas
# reverse - change the ball direction
def reverse(b):
    b.direction *= -1
# Set up function for handling screen refresh
def step():
    if ball.go:
        ball.x += ball.direction
        if ball.x + ball.width > myapp.width or ball.x < 0:
            ball.x -= ball.direction
            reverse(ball)
myapp = App()
# Three primary colors with no transparency (alpha = 1.0)
red = Color(0xff0000, 1.0)
green = Color(0x00ff00, 1.0)
blue = Color(0x0000ff, 1.0)
black = Color(0x000000, 1.0)
# define colors and line style
green = Color(0x00ff00, 1)
black = Color(0, 1)
noline = LineStyle(0, black)
# a rectangle asset and sprite to use as background
bg_asset = RectangleAsset(canvas.width, canvas.height, noline, green)
bg = Sprite(bg_asset, (0,0))
ball_asset = ImageAsset("/images/orb-150545_640.png")
ball = Sprite(ball_asset, (0, 0))
# Original image is too big. Scale it to 1/10 its original size
ball.scale = 0.1
# custom attributes
ball.direction = 7
ball.go = True
myapp.run(step)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ball" 的按鈕點按時, 執行 Ball 物件中的 prog 方法
doc["ball"].bind('click', Ball.prog)
</script>
</p>
<!-- ball ends -->
<p><!-- ****************************** bubble sort start -->
<script type="text/python3">
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 bs1
bs1 = beditor.editor("""# Python program for implementation of Bubble Sort

def bubbleSort(arr):
    n = len(arr)
 
    # Traverse through all array elements
    for i in range(n-1):
    # range(n) also work but outer loop will repeat one time more than needed.
        
        # Last i elements are already in place
        for j in range(n-i-1):
 
            # traverse the array from 0 to n-i-1
            # Swap if the element found is greater
            # than the next element
            if arr[j] > arr[j+1] :
                arr[j], arr[j+1] = arr[j+1], arr[j]
       
        print(str(i+1)+"個已經排好", "共比較"+str(j+1)+"次", arr)
 
# Driver code to test above
arr = [90, 64, 34, 25, 12, 22, 11, 5, 3]
print("original", arr)
bubbleSort(arr)
 
print ("Sorted array is:")
for i in range(len(arr)):
    print ("%d" %arr[i])
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "bsort" 的按鈕點按時, 執行 bs1 物件中的 prog 方法
doc["bsort"].bind('click', bs1.prog)
</script>
</p>
<p><!-- ****************************** bubble sort end --></p>
<p><button id="keyword">Keyword</button><button id="bsort">Bubble Sort</button><button id="ex1">Ex1</button><button id="ex2">Ex2</button><button id="ex3">Ex3</button><button id="ex4">Ex4</button><button id="forloop">Ex5</button><button id="guess">Guess</button><button id="autoguess">Autoguess</button><button id="lottery">大樂透</button><button id="weleadlottery">威力彩</button><button id="temp">Temp</button><button id="draw">Draw</button><button id="flag">Flag</button><button id="bezier">Bezier</button><button id="turtle1">Turtle1</button><button id="turtle2">Turtle2</button><button id="turtle3">Turtle3</button><button id="turtle4">Turtle4</button><button id="turtle5">Turtle5</button><button id="turtle6">Turtle6</button><button id="turtle7">Turtle7</button><button id="turtle8">Turtle8</button><button id="konva1">Konva1</button><button id="bunny">Bunny</button><button id="ball">Ball</button><button id="spur">Spur</button><button id="ycqsort">Ycqsort</button><button id="clear">Clear</button></p>
<h4>參考資料:</h4>
<p><a href="/downloads/turtle_intro.pdf">turtle_intro.pdf</a></p>
<p><a href="/downloads/turtle_intro2.pdf">turtle_intro2.pdf</a></p>
<p>其他擷取程式的方式: <a href="http://mde.tw/2017springvcp/blog/web-based-python.html">http://mde.tw/2017springvcp/blog/web-based-python.html</a></p>
<h4>Qt for Python</h4>
<p><a href="https://www.qt.io/qt-for-python">https://www.qt.io/qt-for-python</a></p>
<p><a href="https://build-system.fman.io/python-qt-tutorial">https://build-system.fman.io/python-qt-tutorial</a></p>
<p><a href="https://build-system.fman.io/pyqt-exe-creation/">https://build-system.fman.io/pyqt-exe-creation/</a></p>
<p><a href="https://github.com/mherrmann/fbs-tutorial">https://github.com/mherrmann/fbs-tutorial</a></p>
<p><a href="https://www.ics.com/blog/we-ported-qt-app-c-python-heres-what-happened">https://www.ics.com/blog/we-ported-qt-app-c-python-heres-what-happened</a></p>
<h4>QML 與 Flutter</h4>
<p><a href="https://paulhammant.com/2016/11/15/qmls-squandered-opportunity/">https://paulhammant.com/2016/11/15/qmls-squandered-opportunity/</a> 中所提到 QML 的弱點在於將 .qml 與 .c++ 或 .py  分開的問題, Google 總算在 Flutter 適度解決了此一瓶頸.</p>
<p>但是 QML 加上 Qt for Python 仍不失為一個好了 Desktop GUI 開發框架.</p>
<p>
<script src="/static/konva.min.js"></script>
</p>
<div id="container"></div>
<p>
<script>
var width = window.innerWidth;
    var height = window.innerHeight;
    // globals
    var curveLayer, lineLayer, anchorLayer, quad, bezier;
    function updateDottedLines() {
        var q = quad;
        var b = bezier;
        var quadLine = lineLayer.get('#quadLine')[0];
        var bezierLine = lineLayer.get('#bezierLine')[0];
        quadLine.setPoints([q.start.attrs.x, q.start.attrs.y, q.control.attrs.x, q.control.attrs.y, q.end.attrs.x, q.end.attrs.y]);
        bezierLine.setPoints([b.start.attrs.x, b.start.attrs.y, b.control1.attrs.x, b.control1.attrs.y, b.control2.attrs.x, b.control2.attrs.y, b.end.attrs.x, b.end.attrs.y]);
        lineLayer.draw();
    }
    function buildAnchor(x, y) {
        var anchor = new Konva.Circle({
            x: x,
            y: y,
            radius: 20,
            stroke: '#666',
            fill: '#ddd',
            strokeWidth: 2,
            draggable: true
        });
        // add hover styling
        anchor.on('mouseover', function() {
            document.body.style.cursor = 'pointer';
            this.setStrokeWidth(4);
            anchorLayer.draw();
        });
        anchor.on('mouseout', function() {
            document.body.style.cursor = 'default';
            this.setStrokeWidth(2);
            anchorLayer.draw();
        });
        anchor.on('dragend', function() {
            drawCurves();
            updateDottedLines();
        });
        anchorLayer.add(anchor);
        return anchor;
    }
    function drawCurves() {
        var context = curveLayer.getContext();
        context.clear();
        // draw quad
        context.beginPath();
        context.moveTo(quad.start.attrs.x, quad.start.attrs.y);
        context.quadraticCurveTo(quad.control.attrs.x, quad.control.attrs.y, quad.end.attrs.x, quad.end.attrs.y);
        context.setAttr('strokeStyle', 'red');
        context.setAttr('lineWidth', 4);
        context.stroke();
        // draw bezier
        context.beginPath();
        context.moveTo(bezier.start.attrs.x, bezier.start.attrs.y);
        context.bezierCurveTo(bezier.control1.attrs.x, bezier.control1.attrs.y, bezier.control2.attrs.x, bezier.control2.attrs.y, bezier.end.attrs.x, bezier.end.attrs.y);
        context.setAttr('strokeStyle', 'blue');
        context.setAttr('lineWidth', 4);
        context.stroke();
    }
    var stage = new Konva.Stage({
        container: 'container',
        width: width,
        height: height
    });
    anchorLayer = new Konva.Layer();
    lineLayer = new Konva.Layer();
    // curveLayer just contains a canvas which is drawn
    // onto with the existing canvas API
    curveLayer = new Konva.Layer();
    var quadLine = new Konva.Line({
        dash: [10, 10, 0, 10],
        strokeWidth: 3,
        stroke: 'black',
        lineCap: 'round',
        id: 'quadLine',
        opacity: 0.3,
        points: [0, 0]
    });
    var bezierLine = new Konva.Line({
        dash: [10, 10, 0, 10],
        strokeWidth: 3,
        stroke: 'black',
        lineCap: 'round',
        id: 'bezierLine',
        opacity: 0.3,
        points: [0, 0]
    });
    // add dotted line connectors
    lineLayer.add(quadLine);
    lineLayer.add(bezierLine);
    quad = {
        start: buildAnchor(60, 30),
        control: buildAnchor(240, 110),
        end: buildAnchor(80, 160)
    };
    bezier = {
        start: buildAnchor(280, 20),
        control1: buildAnchor(530, 40),
        control2: buildAnchor(480, 150),
        end: buildAnchor(300, 150)
    };
    // keep curves insync with the lines
    anchorLayer.on('beforeDraw', function() {
        drawCurves();
        updateDottedLines();
    });
    stage.add(curveLayer);
    stage.add(lineLayer);
    stage.add(anchorLayer);
    drawCurves();
    updateDottedLines();
</script>
</p><h2>W5</h2>
<h4>網際內容管理的使用建議:</h4>
<ol>
<li>在雲端上只存放與個人或團隊專業有關的內容 (以學號作為 identity, 除了 <a href="https://www.linkedin.com/">Linkedin</a> 外, 不要使用本名)</li>
<li>不要將個人生活有關的圖文放到網際空間 (不要使用臉書, 不要使用其他任何雲端社群服務擺放任何個人資料)</li>
<li>儘量使用瀏覽器查找資料, 每次使用後要刪除暫存檔, 避免使用手機上綁定實名制的 Apps</li>
</ol>
<p>這個禮拜開始至 W9, 各小組要將 W1-W4 的教學影片加以整理, 讓每位組員都能在 Blogger 整理自己過去一個多學期的課程學習內容, 以網際內容管理架構, 可攜程式系統及 Github 倉儲與網頁的模式存放內容.</p>
<p>網際內容管理學習 Check List:</p>
<ol>
<li>是否已經建立個人 Blogger?</li>
<li>是否會使用 Blogger, 新增協同著作者?</li>
<li>是否會在 Blogger 中使用各種 HTML 標註, 包括加入 Python 程式碼, 嵌入影片檔案等?</li>
<li>是否會利用 <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a> 建立個人網頁?</li>
<li>是否會在個人網站上嵌入網際 Python (<a href="https://brython.info/">Brython</a>) 程式環境?</li>
<li>是否已經了解所謂的 Bubble Sort Python 程式?</li>
<li>是否已經會使用 SSH 將改版資料 push 到 Github?</li>
<li>各組是否已經找到想要研究的網際內容管理相關的分組專案題目?</li>
</ol>
<p><a href="/downloads/2008_Organizing and Managing Personal Electronic Files- A Mechanical Engineer’s Perspective.pdf">2008_Organizing and Managing Personal Electronic Files- A Mechanical Engineer’s Perspective.pdf</a></p>
<p><a href="/downloads/how-to-code-in-python.pdf">how-to-code-in-python.pdf</a></p>
<p><a href="/downloads/2018_中國區塊鍊產業白皮書.pdf">2018_中國區塊鍊產業白皮書.pdf</a></p>
<p><a href="/downloads/2019-08專題報告-區塊鏈plus時代的社經變革與創新思維.pdf">2019-08專題報告-區塊鏈plus時代的社經變革與創新思維.pdf</a></p>
<p><a href="/downloads/2020年中小企業白皮書(全)_v1.pdf">2020年中小企業白皮書(全)_v1.pdf</a></p>
<p><a href="/downloads/創意台灣 2020 政策白皮書.pdf">創意台灣 2020 政策白皮書.pdf</a></p>
<p><a href="/downloads/Blockchain_for_dummies.pdf">Blockchain_for_dummies.pdf</a></p>
<p><a href="/downloads/ComputerNetworks_936_pages.pdf">ComputerNetworks_936_pages.pdf</a></p>
<h4>2030 台灣科技願景:</h4>
<p style="padding-left: 30px;"><a href="/downloads/taiwan_2030_tech_vision.pdf">taiwan_2030_tech_vision.pdf</a></p><h2>W7</h2>
<p>本週起將請各分組根據說明, 利用分組 Blogger 與個人 Github Pages 網站整理<a href="http://mde.tw/wcmj2021/content/%E5%88%86%E7%B5%84%E5%B0%88%E9%A1%8C.html">分組專題</a>上的內容. 各組將在 W9 利用網際 Reveal 簡報, 以 ShareX 錄製分組專題報告影片. 相關分組報告影片可參考協同產品設計實習 <a href="https://drive.google.com/drive/folders/1t38qYM30FeKw37F49nd0DAD5EMQseDnj">Stage1 簡報影片</a>.</p>
<p>以下則是 W7 的教學內容:</p>
<p>Course notes:</p>
<p style="padding-left: 30px;"><a href="https://ocw.mit.edu/courses/mechanical-engineering/2-12-introduction-to-robotics-fall-2005/lecture-notes/">Introduction to robotics</a></p>
<p style="padding-left: 30px;"><a href="http://hades.mech.northwestern.edu/index.php/Modern_Robotics">http://hades.mech.northwestern.edu/index.php/Modern_Robotics</a></p>
<p style="padding-left: 30px;">Open Access related ebooks:</p>
<p style="padding-left: 60px;"><a href="/downloads/robodk/welding/2018_Book_ControlTheoryTutorial.pdf">2018_Book_ControlTheoryTutorial.pdf</a> (<a href="https://creativecommons.org/licenses/by/4.0/">開放授權</a>電子書)</p>
<p style="padding-left: 60px;"><a href="/downloads/robodk\welding\2021_Book_Cyber-PhysicalSystemsAModel-Ba.pdf">2021_Book_Cyber-PhysicalSystemsAModel-Ba.pdf</a> (<a href="https://creativecommons.org/licenses/by/4.0/">開放授權</a>電子書)</p>
<p style="padding-left: 60px;"><a href="https://link.springer.com/search?facet-content-type=%22Book%22&amp;package=openaccess">Springer Open Access ebooks</a></p>
<p style="padding-left: 60px;"><a href="https://www.springeropen.com/p/engineering">Featured Open Access Journals in Engineering</a></p>
<p style="padding-left: 60px;"><a href="https://www.springeropen.com/p/engineering/mechanical-engineering-and-mechanics">Featured Open Access Journals in Mechanical Engineering &amp; Mechanics</a></p>
<p>Industrial robot off-line simulation 套件下載:</p>
<p style="padding-left: 30px;"><a href="https://www.parallemic.org/RoKiSim.html">https://www.parallemic.org/RoKiSim.html</a> (自由軟體 - no support freeware)</p>
<p style="padding-left: 30px;"><a href="http://a.kmol.info:88/robodk522_kmol.7z">http://a.kmol.info:88/robodk522_kmol.7z</a> (無存檔功能的<a href="https://robodk.com/pricing">試用版</a> - trial version without save function)</p>
<p>可攜系統下載:</p>
<p style="padding-left: 30px;"><a href="http://a.kmol.info:88/kmol2021_spring_v4_robodk.7z">http://a.kmol.info:88/kmol2021_spring_v4_robodk.7z</a> (783 MB) Python 3.9.2 與 RoboDK</p>
<p style="padding-left: 30px;"><a href="http://a.kmol.info:88/kmol2021_spring_v4_robodk_webots.7z">http://a.kmol.info:88/kmol2021_spring_v4_robodk_webots.7z</a> (2.35 GB) Python 3.9.2 (<a href="https://docs.python.org/3/license.html">自由開源套件</a>), <a href="https://robodk.com/">RoboDK</a> (無存檔功能的<a href="https://robodk.com/pricing">試用版</a>) 與 <a href="https://cyberbotics.com/">Webots</a> (<a href="https://cyberbotics.com/doc/guide/webots-license-agreement">自由開源套件</a>)</p>
<p><img alt="" height="285" src="/images/robodk_python_control.gif" width="560"/></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/Ic-iKGSc7dk" title="YouTube video player" width="560"></iframe></p>
<h4>ABB irb4600 robot</h4>
<p><a href="/downloads/robodk/welding/IRB4600_ROB0109EN_J_datasheet-Rev.L.pdf">IRB4600_ROB0109EN_J_datasheet-Rev.L.pdf</a></p>
<p><a href="/downloads/robodk/welding/IRB4600_product_manual_spare_parts.pdf">IRB4600_product_manual_spare_parts.pdf</a></p>
<p><a href="https://cyberbotics.com/doc/guide/irb4600-40">https://cyberbotics.com/doc/guide/irb4600-40</a></p>
<p><a href="https://github.com/CoppeliaRobotics/models/blob/master/robots/non-mobile/ABB%20IRB%204600-40-255.ttm">Coppeliasim ABB IRB4600-40-255 model</a></p>
<p><a href="https://grabcad.com/library/robot-abb-irb-4600-1">ABB IRB4600 Inventor model</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/Jq0-DkEwwj4" title="YouTube video player" width="560"></iframe></p>
<p>以下利用 Python 3.9.2 程式控制 Robodk 5.2.2 版本中的 ABB IRB4600 機械手臂.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/nv7mOBDA_Z8" title="YouTube video player" width="560"></iframe></p>
<h4>控制程式:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/wcmj2021/blob/main/downloads/robodk/welding/welding_ex1.py">welding_ex1.py</a> (from <a href="https://robodk.com/doc/en/PythonAPI/examples.html">https://robodk.com/doc/en/PythonAPI/examples.html</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># ref: https://robodk.com/doc/en/PythonAPI/examples.html

'''
[     1.000000,     0.000000,     0.000000,    30.000000 ;
      0.000000,    -1.000000,    -0.000000,    50.000000 ;
      0.000000,     0.000000,    -1.000000,    50.000000 ;
      0.000000,     0.000000,     0.000000,     1.000000 ];

'''

# This macro shows an example to draw a polygon of radius R and n_sides vertices using the RoboDK API for Python
from robolink import *    # API to communicate with RoboDK for simulation and offline/online programming
from robodk import *      # Robotics toolbox for industrial robots

# Any interaction with RoboDK must be done through RDK:
RDK = Robolink()

# New versions of RoboDK automatically add the current folder to the path (after 4.2.2)
path_stationfile = RDK.getParam('PATH_OPENSTATION')
# get the robot, frame and tool objects
robot = RDK.ItemUserPick('', ITEM_TYPE_ROBOT)
    
# get the current position of the TCP with respect to the reference frame:
# (4x4 matrix representing position and orientation)
target_ref = robot.Pose()
pos_ref = target_ref.Pos()
print("Drawing a polygon around the target: ")
print(Pose_2_TxyzRxyz(target_ref))

# move the robot to the first point:
robot.MoveJ(target_ref)

# It is important to provide the reference frame and the tool frames when generating programs offline
robot.setPoseFrame(robot.PoseFrame())
robot.setPoseTool(robot.PoseTool())
robot.setZoneData(10) # Set the rounding parameter (Also known as: CNT, APO/C_DIS, ZoneData, Blending radius, cornering, ...)
robot.setSpeed(200) # Set linear speed in mm/s

# Set the number of sides of the polygon:
n_sides = 6
R = 300

# make a hexagon around reference target:
for i in range(n_sides+1):
    ang = i*2*pi/n_sides #angle: 0, 60, 120, ...

    #-----------------------------
    # Movement relative to the reference frame
    # Create a copy of the target
    target_i = Mat(target_ref)
    pos_i = target_i.Pos()
    pos_i[0] = pos_i[0] + R*cos(ang)
    pos_i[1] = pos_i[1] + R*sin(ang)
    target_i.setPos(pos_i)
    print("Moving to target %i: angle %.1f" % (i, ang*180/pi))
    print(str(Pose_2_TxyzRxyz(target_i)))
    robot.MoveL(target_i)

    #-----------------------------
    # Post multiply: relative to the tool
    #target_i = target_ref * rotz(ang) * transl(R,0,0) * rotz(-ang)
    #robot.MoveL(target_i)

# move back to the center, then home:
robot.MoveL(target_ref)

print('Done')</pre>
<h3>Call for Code</h3>
<p>參賽發想: <a href="https://heroku5.github.io/taiwan-no1">https://heroku5.github.io/taiwan-no1</a></p>
<h4>近端動態網站編輯:</h4>
<p><img alt="" height="373" src="/images/localhost_website_editing.png" width="600"/></p>
<h4>Heroku 同步網站 app 部署:</h4>
<p><img alt="" height="439" src="/images/Heroku_app_deployment.png" width="600"/></p>
<h4>RedHat PHP App build:</h4>
<p><img alt="" height="375" src="/images/RedHat_Openshift_app_build.png" width="600"/></p>
<p>Technology:</p>
<p style="padding-left: 30px;">Python and iot:</p>
<p style="padding-left: 60px;"><a href="https://github.com/IBM-Cloud/python-iot-raspberry-pi">https://github.com/IBM-Cloud/python-iot-raspberry-pi</a></p>
<p style="padding-left: 30px;">Python and SQL:</p>
<p style="padding-left: 60px;"><a href="https://github.com/IBM-Cloud/sql-query-clients">https://github.com/IBM-Cloud/sql-query-clients</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/IBM-Cloud/github-traffic-stats">https://github.com/IBM-Cloud/github-traffic-stats</a></p>
<p style="padding-left: 30px;">Flutter and Flask:</p>
<p style="padding-left: 60px;"><a href="https://github.com/mohammedhashim44/Flutter-Flask-Login">https://github.com/mohammedhashim44/Flutter-Flask-Login</a></p>
<p style="padding-left: 30px;">Flutter and Raspberry Pi:</p>
<p style="padding-left: 60px;"><a href="https://github.com/ardera/flutter-pi">https://github.com/ardera/flutter-pi</a></p>
<p style="padding-left: 30px;"><a href="https://www.ansible.com/">https://www.ansible.com/</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/IBM-Cloud/clouddatabases-redis-helloworld-python">https://github.com/IBM-Cloud/clouddatabases-redis-helloworld-python</a></p>
<p style="padding-left: 30px;">Bluemix:</p>
<p style="padding-left: 60px;"><a href="https://blog.cavedu.com/2016/05/15/ibm-bluemix-%E7%AC%AC%E9%9B%B6%E7%AB%A0-ibm-bluemix-%E4%BB%8B%E7%B4%B9/">https://blog.cavedu.com/2016/05/15/ibm-bluemix-%E7%AC%AC%E9%9B%B6%E7%AB%A0-ibm-bluemix-%E4%BB%8B%E7%B4%B9/</a></p>
<p><a href="https://www.ibm.com/blogs/think/tw-zh/2021/03/24/taiwan-ptech-students-joins-callforcodeptechchallenge/?social_post=4649485328&amp;linkId=114220755">2021.03.24</a></p>
<p>以下為新聞稿:</p>
<blockquote>
<p>近幾年，全球人類面臨前所未有的生存危機，<span style="background-color: #ffff99;">極端氣候導致的天災更加頻繁</span>，從 2020 年更有新冠肺炎在全球肆虐，顛覆所有人的生活方式，也重組了商業模式。IBM 一直致力於<span style="background-color: #ffff99;">環境永續與災害預防</span>，自 2018 年起攜手 Call for Code 組織、聯合國與 Linux 教育基金會，舉行「Call for Code Challenge 全球開發者大賽」。此競賽號召全球開發者利用 IBM 提供的免費資源與開放數據，聯合組隊，提交針對因應氣候變遷、水資源和打擊飢荒的解決方案。<br/><br/><br/>今年更首度推出「Call for Code P-TECH Challenge」，全球 16 個國家與地區未滿 18 歲的 P-TECH 教育模式學生，將組隊貢獻他們的 STEM 專長，化身開發人員，呼應 IBM 的號召，一同解決攸關人類永續生存的議題！在台灣，來自台北科技大學、高雄科技大學、虎尾科技大學與仁德醫專四所 P-TECH 學校學生也將組隊參賽，甚至組織跨校、跨區的團隊，與來自全球 16 國的 P-TECH 學生同台競技，一同實踐科技向善的精神！<br/><br/>「Call for Code P-TECH Challenge」 考驗 P-TECH 學生創新能力、技術力與團隊合作能力<br/><br/>IBM 自 2011 年推動 P-TECH 教育模式（Pathways in Technology Early College High Schools）以來，一直致力於人才培育、串連在地產業與國際資源，為學生們規劃技能與職涯藍圖，以期幫助學生培養職場所需軟硬實力與數位技能，未來可順利接軌職場。基於希望學生運用所學與發揮團隊合作，一起為社會作出有正向積極的貢獻，IBM 今年首次推出「Call for Code P-TECH Challenge」，P-TECH 學生將以「氣候變遷」或「新冠肺炎」作為挑戰主軸，從現在至 6 月底，參賽學生將在設計思考工作坊中，進行主題發想、收斂概念、制訂行動計畫，運用 IBM 所提供的開放數據與模組進行程式編碼（如 Red Hat OpenShift、IBM Cloud、IBM Watson、IBM Blockchain、來自 IBM Weather Company 的大氣資料），向挑戰賽導師諮詢技術內容，並在 6 月底前舉行的 48 小時線上駭客松後提交最終解決方案。全球優勝團隊除了豐厚獎品外，將可擁有額外 4 週時間繼續發展專案並參與項目開發，並將專案引薦給 IBM 高階主管！</p>
<p>兩岸三地啟動 「Call for Code P-TECH Challenge」<br/><br/>「Call for Code P-TECH Challenge」已在這兩週陸續於兩岸三地正式啟動。在 3/23、3/24 的台灣啟動大會上，不少學生表示期望透過與不同學校、文化背景的成員合作，擦出新火花。臺北科技大學智慧自動化工程科二年級的林宏信同學表示，「雖然可能有語言問題和地理距離，但能運用科技軟體輔助溝通，也是新的一種學習體驗」，而其他同學也對於跨校、跨區組隊和交流躍躍欲試。<br/><br/><br/>身為 2019 年 IBM Developer 倡議者也是 P-TECH 導師的 IBM 大中華軟體研發中心軟體工程師鍾純勝（Vincent Chung）不但親自在啟動大會上為學生說明 IBM 的技術工具和應用外，也鼓勵學生，「選題跟創意發想往往是最耗時、困難的地方，但通常確立有興趣的領域以及想解決的問題後，整個主題及實作內容將會明朗化。只要能懂得使用 IBM 提供的應用程式與服務，不需要非常高的技術門檻，也可以完成很有意義的服務與解決方案。」作為本賽事的倡議者，Vincent 將在賽事期間協助同學認識 IBM 開發者資源，期待看到參賽同學透過創意發想，還有國際舞台的同台競技。不但可以累積寶貴的團隊合作與跨文化學習經驗，也打造出屬於自己、具有應用價值並且可以解決人類生存問題的解決方案。</p>
</blockquote>
<p><a href="https://callforcode.org/global-challenge/">https://callforcode.org/global-challenge/</a></p>
<p><br/>What is the Call for Code Global Challenge?<br/><br/>In the Call for Code Global Challenge, you can join the fight against climate change by building and deploying open source solutions in the cloud. By participating, you’ll build critical skills for yourself and your teams and deploy solutions to help communities across the globe.<br/><br/>Built on open source principles, the Call for Code Global Challenge asks developers and problem solvers to form teams and develop solutions that address specific problems in unique, clearly demonstrable ways. The most successful solutions are those scoped to have the greatest community impact with the smallest technological footprint. Last year’s winner Agrolly is a perfect example, with its mobile application to help small farmers better understand what to plant, based on weather patterns and crop characteristics.</p>
<p><br/>Three global focus areas<br/><br/>According to the United Nations, “The impacts of climate change are global in scope and unprecedented in scale. Without drastic action today, adapting to these impacts in the future will be more difficult and costly.” Given the far-reaching and devastating effects of climate change, we have divided the 2021 Global Challenge into three sub-themes:</p>
<p><br/>What is the problem?<br/><br/>Worldwide consumption and production drives the global economy, yet the current use of natural resources is unsustainable. The global material footprint rose nearly 18 percent from 73 billion metric tons in 2010 to 85.9 billion metric tons in 2017, the UN reports.  That’s why Sustainable Development Goal 12 aims to achieve economic growth, sustainable development, and reduce our ecological footprint by changing the way we produce and consume goods and resources.</p>
<p><br/>How can technology solve the problem?<br/><br/>Technology can help in many ways, from recommendations on energy efficiency to highlighting the carbon footprint of online purchases. The goal is to take into account all phases of resource use to do more and better with less.</p>
<p><br/>The idea<br/><br/>One of the more pressing challenges in addressing waste and shifting to a more circular economy is the increasing complexity of products.  Electronics are getting smaller and more sophisticated, making recovery and reuse of materials challenging. Product designers should consider how to create products with end-of-life in mind, by reducing the number of components, for example. Communities could benefit from developing infrastructure, policies, and systems to support repair, reuse, and recycling.<br/><br/>To encourage this change, we propose creating a transparent and trustworthy platform for trading resources and knowledge, as well as providing access to a community of experts. This platform will enable producers and consumers to build and buy products in a sustainable way for our society — by reducing waste, increasing the use of recycled materials, and improving the overall repairability of products.<br/><br/>The platform would support the two parties supporting sustainable production with recycled materials: <br/><br/>    A producer or a manufacturer who can find and compare price, quality, and carbon impact of recycled materials while learning about best practices for recyclable processing through a trustworthy, real-time trading platform</p>
<p><br/>    A recycled material supplier who can sell recycled resources directly to producers through a marketplace at competitive rates</p>
<p><img caption="false" height="400" src="https://dw1.s81c.com/developer-static-pages/callforcode/en/get-started/climate-change/green-consumption/images/cfc-production-consumption-architecture.png" width="600"/></p>
<p></p>
<ol>
<li>The user interacts with a web application for the marketplace.</li>
<li>The React app communicates with the back-end APIs.</li>
<li>The Fastify back end handles data requested by the web app and exposes some public endpoints for material market data through a RESTful API.</li>
<li>The back end queries Watson Discovery for updated information on materials.</li>
<li>Discovery manages a collection of recycled and non-recycled material information, such as average prices, carbon impact, and quality. Discovery enriches the data with natural language processing so that it can be more easily indexed.</li>
<li>Discovery crawls public websites for updates on current material information.</li>
<li>The back end stores and retrieves information on material that is provided by users in an IBM Cloudant NoSQL database.</li>
<li>A Kubernetes cluster is used for a scalable, flexible, modern containerized environment.</li>
<li>New Relic provides Full-Stack Observability and monitoring within the Kubernetes environment</li>
</ol>
<p></p>
<p></p><h2>W8</h2>
<h4>主題一:</h4>
<p>利用 <a href="https://leoeditor.com/">Leo Editor</a> 編輯 <a href="https://revealjs.com/">reveal.js</a> 網際簡報.</p>
<p>在可攜系統的命令列視窗中輸入 leo, 即可開啟 Leo Editor. 若無法順利開啟 Leo Editor 而且進入視窗表單輸入迴圈, 則可在啟動的 home 目錄下建立一個 .leo 目錄, 且在目錄中建立一個純文字檔案 .leoID.txt 內容為任何字串 (可以使用 leo), 之後再重新啟動可攜系統後, 在命令視窗中輸入 leo 就可以啟動 Leo Editor.</p>
<h4>Leo Editor 基本操作:</h4>
<p style="padding-left: 30px;">Ctrl + i : insert node (insert)</p>
<p style="padding-left: 30px;">Ctrl + r : node 往右移動 (right)</p>
<p style="padding-left: 30px;">Ctrl + l : node 往左移動 (left)</p>
<p style="padding-left: 30px;">Ctrl + u: node 往上移動 (up)</p>
<p style="padding-left: 30px;">Ctrl + d : node 往下移動 (down)</p>
<p style="padding-left: 30px;">@edit 節點編輯指令</p>
<p style="padding-left: 30px;">@clean 節點含下屬編輯指令</p>
<p>Leo Editor 遞迴導入外部程式碼節點程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">c.recursiveImport(
    dir_ = r'./',
    # use @clean to parse the associated files
    kind = '@clean',
    # if save_at_file = True, @@ will use to protect the source codes
    safe_at_file = False,
    theTypes = ['.py']
)</pre>
<p>recursiveImport 使用案例:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/RobotSimulator">https://github.com/mdecourse/RobotSimulator</a> 採用 Python 程式語言開發, 使用者可以在開發目錄中建立一個 Leo Editor 專案擋, 並將上述遞迴節點指令輸入後, 以 Ctrl + b 要求執行後, 便可將程式碼納入 Leo Editor 節點架構中.</p>
<p>CMSiMDE 網際內容管理系統中內含 reveal.js, 其 .leo 檔案位於 config/reveal.leo, 利用 Leo Editor 開啟後, 可以編輯各 slide 內容. slide 1 - slide 31 代表各種不同簡報內容, 各分組可以自行取捨編輯後在靜態網頁中的 Home -reveal 下拉式功能表中開啟.</p>
<p>WCMJ2021 reveal.js 簡報: <a href="https://mde.tw/wcmj2021/reveal/">https://mde.tw/wcmj2021/reveal/</a></p>
<h4>主題二:</h4>
<h4><a href="https://roboticsandautomationnews.com/2021/04/12/improved-safety-of-self-driving-car/42215/">Robotics and Automation</a></h4>
<p style="padding-left: 30px;"><a href="https://www.epfl.ch">https://www.epfl.ch</a> (<a href="https://zh.wikipedia.org/wiki/%E6%B4%9B%E6%A1%91%E8%81%94%E9%82%A6%E7%90%86%E5%B7%A5%E5%AD%A6%E9%99%A2">瑞士洛桑聯邦理工學院</a>)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/content/pdf/10.1007%2F978-3-319-31895-0.pdf">Automated Driving 電子書</a></p>
<p style="padding-left: 30px;"><a href="https://asia.nikkei.com/Business/Automobiles/Honda-s-self-driving-car-A-smooth-ride-when-all-goes-right">Honda level 3 news</a> (<a href="https://www.electronicdesign.com/markets/automotive/article/21158656/electronic-design-worlds-first-level-3-selfdriving-production-car-now-available-in-japan">Honda Legend</a>)</p>
<p style="padding-left: 30px;"><a href="/downloads/distributed_intelligent_systems.pdf">distributed_intelligent_systems.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Sensing, Action, and Control in Mobile Robotics.pdf">Sensing, Action, and Control in Mobile Robotics.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Localization Methods for Mobile Robots.pdf">Localization Methods for Mobile Robots.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Localization Methods and an Introduction to Collective Movements.pdf">Localization Methods and an Introduction to Collective Movements.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Collective Movements in Multi-Robot Systems.pdf">Collective Movements in Multi-Robot Systems.pdf</a></p>
<p style="padding-left: 30px;"><a href="/downloads/Multi-Level Modeling Methods for Swarm Robotic Systems.pdf">Multi-Level Modeling Methods for Swarm Robotic Systems.pdf</a></p>
<p><img alt="" height="620" src="/images/j3016-levels-of-driving-automation-12-10.jpg" width="800"/></p>
<h4>開源套件:</h4>
<h4>Webots:</h4>
<p style="padding-left: 30px;">The Webots project started in 1996, initially developed by Dr. Olivier Michel at the Swiss Federal Institute of Technology (<a href="https://www.epfl.ch">EPFL</a>) in Lausanne, Switzerland and then from 1998 by Cyberbotics Ltd. <a href="https://github.com/cyberbotics/webots/commits/master?after=f66a3e251b21c43b2f27d5d6626db39ab856ccf5+12515&amp;branch=master">2018 年底 Webots 決定開源</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/cyberbotics/webots">https://github.com/cyberbotics/webots</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/webots_docs">https://github.com/mdecourse/webots_docs</a></p>
<p style="padding-left: 30px;"><a href="https://cyberbotics.com/doc/guide/ure">https://cyberbotics.com/doc/guide/ure</a></p>
<p style="padding-left: 30px;">Interview: <a href="http://lis2.epfl.ch/resources/podcast/2007/01/olivier-michel-robot-simulation-as.html">http://lis2.epfl.ch/resources/podcast/2007/01/olivier-michel-robot-simulation-as.html</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/WlB2cRim_80" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/gy75VfUg9II" title="YouTube video player" width="560"></iframe></p>
<h4>FEM:</h4>
<p style="padding-left: 30px;"><a href="https://github.com/Range-Software/range3">https://github.com/Range-Software/range3</a></p>
<p style="padding-left: 30px;"><a href="https://gitlab.com/akantu">https://gitlab.com/akantu</a> </p>
<p style="padding-left: 30px;"><a href="https://www.epfl.ch/labs/lsms/wp-content/uploads/2018/10/akantu_ug_v2.3.pdf">https://www.epfl.ch/labs/lsms/wp-content/uploads/2018/10/akantu_ug_v2.3.pdf</a></p>
<h3>Hybrid System</h3>
<p>當使用下列 start_ipv6.bat 批次檔案啟動隨身系統時, 因為部分系統檔案放在 C:\, 導致原先採用 Y:\Python39\python.exe 或 Y:\Python39\pythonw.exe 設定的程式無法順利執行, 其中包括 pip (位於 Python39\Scripts), SciTE 與 Leo Editor. 因應的方式就是要將這些包含絕對目錄設定的內容, 改為採用相對目錄執行 Python.</p>
<p>以 SciTE 中的 python.properties 為例, 必須將原先:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">if PLAT_WIN
    #python.command=pyw
    python.command=y:\python39\pythonw.exe</pre>
<p>的設定改為:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">if PLAT_WIN
	#python.command=pyw
	python.command=pythonw.exe</pre>
<p>至於 pip.exe 與 leo.exe (位於 Python39/Scripts) 則必須要從 C: 複製一份到 Hybrid 隨身系統的 Y:\, 並且利用 <a href="https://mh-nexus.de/en/hxd/">https://mh-nexus.de/en/hxd/</a> 將 pip.exe 中的 y:\python\python.exe 改為 python.exe, 以及將 leo.exe 中的 y:\python\pythonw.exe 改為 pythonw.exe.</p>
<p>經過兩項修改, Hybrid 可攜隨身系統才能正確利用 SciTE 執行 Python 程式, 並且在命令列中以 pip 進行模組安裝, 以 leo 開啟 Leo Editor.</p>
<h4>start_ipv6.bat</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">@echo off
set Disk=y
subst %Disk%: "data"

set Local=C:\kmol2021_spring_v3\data

%Disk%:

set HomePath=%Disk%:\home_ipv6
set HomeDrive=%Disk%:\home_ipv6
set Home=%Disk%:\home_ipv6
set USERPROFILE=%Disk%:\home_ipv6

REM 將系統 Python 程式的 io 設為 utf-8
set PYTHONIOENCODING="utf-8"

set PYTHONPATH=%Local%\Python39\DLLs;%Local%\Python39\Lib;%Local%\Python39\Lib\site-packages;

set PYTHONHOME=%Local%\Python39

set GIT_SSH=%Disk%:\putty\plink.exe

REM 設定跟 Python 有關的命令搜尋路徑
set path_python=%Local%\Python39;%Local%\Python39\Scripts;
set path_portablegit=%Local%\Portablegit\bin;
set path_heroku=%Local%\heroku\bin;
REM for heroku login
set HTTP_PROXY=http://[2001:288:6004:17::53]:3128
set HTTPS_PROXY=http://[2001:288:6004:17::53]:3128

path=%Disk%:;%path_python%;%path_portablegit%;%path_heroku%;%path%;

REM ref: https://drive.google.com/file/d/1S0XYN-1MKxo0KFYxs0pFTcTrr8NL4n1b/view

REGEDIT.EXE /S %Disk%:\putty_github_com.reg;

start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe
start /MIN cmd.exe

start /MIN %Disk%:\wScite\SciTE.exe
start /MIN %Disk%:\wScite\SciTE.exe

Exit</pre>
<p></p><h2>W9</h2>
<h4>期中考週流程:</h4>
<ol>
<li>利用 ::17 開啟 Ethercalc 表單, 收集各班學員課程期望分數, 將期中期望成績送至教務主機.</li>
<li>此一 W1-W9 各學員的期望成績, 將與學員的個人與分組倉儲內容進行比較後, 會反應至學員的期末學期成績中, 若實際評量結果與學員期望成績產生一定差距, 將酌予加減各學員應得之課程學期成績.</li>
<li>各分組進行 6-12 分鐘 (每一組員簡報時間至多 2 分鐘) 的期中網際簡報, 主要說明各組員 W1-W8 所完成的網站內容, 並透過 ShareX 錄製簡報影片 (簡報前後按下 Shift + PrintScreen, 並採全畫面錄影), 之後會將各組簡報影片送到 GDrive 以供參考.</li>
</ol>
<p><a href="https://drive.google.com/drive/folders/1t38qYM30FeKw37F49nd0DAD5EMQseDnj">分組簡報影片</a></p><h2>W10</h2>
<h4>五專網際內容管理課程下半學期的主題如下:</h4>
<p>W10 將進行下列事項:</p>
<ol>
<li>根據<a href="https://nfulist.herokuapp.com/?semester=1092&amp;courseno=2384&amp;column=True">選課成員名單</a> (<a href="https://github.com/mdecourse/nfulist">原始碼</a>), 共有 43 位成員, 將以每 6 人一組進行分組專題, 而最後一組則有 7 名組員.</li>
<li>W10 將以 <a href="https://github.com/audreyt/ethercalc">Ethercalc</a> 取各組員 Github 帳號, 從而建立各組分組網站與組員網站連結 (含倉儲連結)</li>
<li>說明 <a href="https://mde.tw/wcmj2021/content/W8.html">W8</a> - <a href="https://leoeditor.com/">Leo Editor</a> 在程式開發流程的應用 + 智動化未來與機電資整合產品開發 (W10 課程內容)</li>
</ol>
<p>其餘各週除了說明 <a href="https://fossil-scm.org">Fossil SCM</a> 的應用外, 將介紹如何利用 <a href="https://leoeditor.com/">Leo Editor</a> 建立各組員網站下的 <a href="https://blog.getpelican.com/">Pelican Blog</a>, 並設法透過程式方法與先前所建立的 <a href="https://www.blogger.com">Blogger</a> 網誌內容同步.</p>
<h4>W11 - W17 將在課程時段與每週四 (19:00-21:00 實習時段) 進行下列分組專題:</h4>
<p style="padding-left: 30px;">選擇<span style="background-color: #ffff99;">三組執行<a href="https://mde.tw/wcmj2021/content/主機板.html" style="background-color: #ffff99;">主機板</a>分組專題</span> (<span style="background-color: #ccffcc;">實體電腦安裝</span> - 工作站室選擇 3 台電腦 + 500 GB 硬碟 分別安裝一台 Windows 10, 一台 Ubuntu 20.04 Server, 一台 Ubuntu 20.04 Desktop) 操作系統.</p>
<p style="padding-left: 60px;">三台實體主機分別在 IPv6 網路環境下, 配置可攜程式環境或安裝可啟動 cmstermplate 動態或靜態伺服器的程式環境, 同時安裝配置 Fossil SCM: <a href="https://fossil-scm.org">https://fossil-scm.org</a>.</p>
<p style="padding-left: 60px;">使用者可以在 Windows 10 環境中以遠端桌面對其他 Windows 10 或 Ubuntu 20.04 X-Windows 進行遠端操控.</p>
<p style="padding-left: 60px;">使用者可以在 Windows 10 環境, 以 ssh 連線至 Ubuntu 20.04 伺服器, 啟動自行架構的 cmstemplate 動態或靜態網際伺服器, 進行動態網際內容管理或檢視靜態網站.</p>
<p style="padding-left: 30px;">選擇<span style="background-color: #ffff99;">三組執行虛擬主機專題</span> (<span style="background-color: #ccffcc;"> <a href="https://www.virtualbox.org/" style="background-color: #ccffcc;">Virtualbox</a> 主機安裝</span> - 分別在電腦輔助設計室中的三台電腦中 Virtualbox 環境安裝一台˙ Windows 10, 一台 Ubuntu 20.04 Server, 一台 Ubuntu 20.04 Desktop 操作系統.</p>
<p style="padding-left: 60px;">三台虛擬主機分別在 IPv6 網路環境下以 NAT, Host Only 與 Bridged 網卡設定, 與其他實體主機或虛擬主機在網際介面下, 啟動 cmstermplate 動態或靜態伺服器, 同時安裝配置 Fossil SCM: <a href="https://fossil-scm.org">https://fossil-scm.org</a>.</p>
<p style="padding-left: 30px;">選擇<span style="background-color: #ffff99;">一組執行 <a href="https://mde.tw/wcmj2021/content/Topic2.html" style="background-color: #ffff99;">Topic2</a> 分組專題</span>, 可在電腦輔助設計室中安裝配置學校所提供的 <span style="background-color: #ccffcc;">Solidworks, NX12 與 Inventor</span>.</p>
<p style="padding-left: 30px;">W17 將利用 <a href="https://github.com/audreyt/ethercalc">Ethercalc</a> 取各學員的課程期望成績.</p>
<h4>W18 將進行各組期末專題網際簡報:</h4>
<p style="padding-left: 30px;">各分組在 W11-W17 週專題執行過程, 必須根據所完成的進度, 將內容逐步放入各組員與分組網站中.</p>
<p style="padding-left: 30px;">專題執行期間, 各分組每週必須進行 2-3 分鐘的分組簡報錄影.</p>
<p style="padding-left: 30px;">期末考週各分組必須進行 10 分鐘整的分組簡報錄影.</p><h3>Topic2</h3>
<p>學校與系上所提供的軟體套件安裝介紹</p>
<p style="padding-left: 30px;">Windows 10</p>
<p style="padding-left: 30px;"><a href="https://2019wcm.blogspot.com/search/label/%E6%A0%A1%E5%9C%92%E8%BB%9F%E9%AB%94">校園軟體</a></p>
<p style="padding-left: 30px;">設計與分析套件:</p>
<p style="padding-left: 60px;"><a href="http://mde.tw/wcm2021/content/%E8%BC%94%E5%8A%A9%E5%B7%A5%E5%85%B7.html">輔助工具</a></p>
<p style="padding-left: 60px;">校園下載<br/><br/>以下連結必須在校園網路、使用學校代理主機或 vpn 模式下才可下載<br/><br/><a href="https://software.nfu.edu.tw/Autodesk/autodesk.iso">AutoDesk PDSU</a> (Product Design Suite Ultimate edition) 包含:<br/><br/>Autodesk Inventor Professional<br/>AutoCAD Mechanical<br/>AutoCAD Electrical<br/>AutoCAD<br/>Navisworks Simulate<br/>AutoCAD Raster Design<br/>Autodesk Recap<br/>Autodesk Vault Basic<br/>Autodesk Fusion 360<br/>Navisworks Manage<br/><br/><a href="https://software.nfu.edu.tw/files/AUTODESK%E5%AE%89%E8%A3%9D%E6%95%99%E5%AD%B8.pdf">AutoDesk 安裝教學.pdf</a><br/><br/>官方網站下載 <br/><br/>希望在任何地方使用,可以從 <a href="https://www.autodesk.com/education/free-software/inventor-professional">https://www.autodesk.com/education/free-software/inventor-professional</a> , 以 @gm 電子郵箱登錄且認證後下載, 取得三年免費使用授權. 允許同時安裝在筆電與桌上型電腦共兩套.<br/><br/>建議安裝流程<br/><br/>利用學校配發的電子郵箱, 連結至 <a href="https://www.autodesk.com/education/free-software/inventor-professional">https://www.autodesk.com/education/free-software/inventor-professional</a> , 登記帳號, 驗證 email 後, 取得 AutoDesk Inventor Professional 版本 2019 的 Serial Number 後, 從學校網站中下載 <a href="https://software.nfu.edu.tw/Autodesk/autodesk.iso">AutoDesk PDSU</a>, 安裝後, 利用前述所取得的序號啟動 AutoDesk Inventor Professional 2019, 之後就可以在任何地方上網使用.</p>
<p style="padding-left: 60px;">只要是校內 IP 就可以下載, 無需使用 vpn.<br/><a href="https://software.nfu.edu.tw/Developer/Visual%20Studio/tw/Visual_Studio_Pro_2019.zip">https://software.nfu.edu.tw/Developer/Visual%20Studio/tw/Visual_Studio_Pro_2019.zip</a> <br/><a href="https://software.nfu.edu.tw/Developer/Visual%20Studio/tw/Visual_Studio_Pro_2017.zip">https://software.nfu.edu.tw/Developer/Visual%20Studio/tw/Visual_Studio_Pro_2017.zip</a> <br/><a href="https://software.nfu.edu.tw/Developer/Visual%20Studio/tw/Visual_Studio_Pro_2015.zip">https://software.nfu.edu.tw/Developer/Visual%20Studio/tw/Visual_Studio_Pro_2015.zip</a> <br/><a href="https://software.nfu.edu.tw/Developer/Visual%20Studio/en/Visual_Studio_Pro_2015.zip">https://software.nfu.edu.tw/Developer/Visual%20Studio/en/Visual_Studio_Pro_2015.zip</a> <br/><br/>https://software.nfu.edu.tw/Windows/tw/Win10_1909_64BIT_CH.ISO<br/><a href="https://software.nfu.edu.tw/KMS/windows_kms.bat">https://software.nfu.edu.tw/KMS/windows_kms.bat</a> <br/><br/>https://software.nfu.edu.tw/Office/tw/Office_Pro_Plus_2016_64Ch.iso<br/><a href="https://software.nfu.edu.tw/KMS/Office_2016_KMS.bat">https://software.nfu.edu.tw/KMS/Office_2016_KMS.bat</a></p>
<p style="padding-left: 60px;"><a href="https://software.nfu.edu.tw/Autodesk/autodesk.iso">https://software.nfu.edu.tw/Autodesk/autodesk.iso</a> <br/><a href="https://software.nfu.edu.tw/files/AUTODESK%E5%AE%89%E8%A3%9D%E6%95%99%E5%AD%B8.pdf">https://software.nfu.edu.tw/files/AUTODESK%E5%AE%89%E8%A3%9D%E6%95%99%E5%AD%B8.pdf</a> <br/>2001:288:6004:1::115</p><h1>分組專題</h1>
<ol>
<li>實體 Windows 10 64 位元電腦安裝與配置應用 (Ram 16 GB 電腦, 可以在其中安裝 Virtualbox 再安裝其他操作系統)</li>
<li>實體 Ubuntu 20.04 Desktop 電腦安裝與配置應用 (Ram 8GB, 可以利用 free -m 查詢記憶體容量)</li>
<li>實體 Ubuntu 20.04 Server 電腦安裝與配置應用 (Ram 8GB)</li>
<li>虛擬 Windows 10 64 位元電腦安裝與配置應用 (若 CPU 夠快並且 Ram 夠大, 可以透過 <a href="https://www.whonix.org/wiki/Nested_Virtualization">Nested Virtualization</a> 技術, 在虛擬主機中再安裝配置虛擬主機)</li>
<li>虛擬 Ubuntu 20.04 Desktop 電腦安裝與配置應用</li>
<li>虛擬 Ubuntu 20.04 Server 電腦安裝與配置應用</li>
<li>參數繪圖軟體安裝 (Solidworks, NX 與 Inventor)</li>
</ol>
<p>Windows 10 操作系統 iso 下載 - 請登入 <a href="https://software.nfu.edu.tw/">https://software.nfu.edu.tw/</a> 下載</p>
<p><a href="https://ubuntu.com/download/desktop">Ubuntu 20.04 Desktop iso 下載</a></p>
<p><a href="https://ubuntu.com/download/server">Ubuntu 20.04 Server iso 下載</a></p>
<p style="padding-left: 30px;">Ubuntu 操作系統參考文件: <a href="https://help.ubuntu.com/lts/ubuntu-help/index.html">https://help.ubuntu.com/lts/ubuntu-help/index.html</a></p>
<p style="padding-left: 30px;">CMSiMDE 部署: <a href="https://mdecourse.blogspot.com/2020/05/cmsimde_64.html">https://mdecourse.blogspot.com/2020/05/cmsimde_64.html</a></p>
<p style="padding-left: 30px;">Fossil SCM on Ubuntu:</p>
<p style="padding-left: 60px;"><a href="https://mdecourse.blogspot.com/2021/02/fossil-scm-on-ubuntu.html">https://mdecourse.blogspot.com/2021/02/fossil-scm-on-ubuntu.html</a> (安裝)</p>
<p style="padding-left: 60px;"><a href="https://mdecourse.blogspot.com/2021/02/fossil-scm.html">https://mdecourse.blogspot.com/2021/02/fossil-scm.html</a> (使用案例)</p>
<p style="padding-left: 60px;"><a href="https://mdecourse.blogspot.com/2021/02/fossil-scm-github.html">https://mdecourse.blogspot.com/2021/02/fossil-scm-github.html</a> (與 Github 整合)</p>
<p>Virtualbox 軟體下載</p>
<p style="padding-left: 30px;">了解 <a href="https://www.virtualbox.org/manual/ch06.html">https://www.virtualbox.org/manual/ch06.html</a> (NAT, Host Only 與 Bridged 網路的配置與應用)</p>
<p style="padding-left: 30px;">每一台 Virtualbox 虛擬主機可以<a href="https://cadlab.mde.tw/post/virtualbox-de-ying-yong-yu-wang-lu-she-ding-er.html">配置 36 片虛擬網路卡</a></p>
<p style="padding-left: 30px;">每個虛擬主機硬碟檔案都有獨特的 <a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">UUID</a> (通用唯一辨識碼), 使用者可以利用指令變更硬碟檔案的辨識編號.</p>
<p style="padding-left: 30px;">Virtualbox 虛擬主機設定:</p>
<p style="padding-left: 60px;"><a href="https://mdecourse.blogspot.com/2020/05/virtualbox-ubuntu.html">https://mdecourse.blogspot.com/2020/05/virtualbox-ubuntu.html</a></p>
<p style="padding-left: 60px;">CMSiMDE 部署: <a href="https://mdecourse.blogspot.com/2020/05/cmsimde_64.html">https://mdecourse.blogspot.com/2020/05/cmsimde_64.html</a></p>
<p>Solidworks 安裝 dvd 下載</p>
<p>NX 安裝 dvd 下載</p>
<p>Inventor 安裝 dvd 下載</p>
<p><a href="https://fossil-scm.org/home/uv/download.html">Fossil SCM 軟體下載</a> (for 自行在實體或虛擬 Ubuntu 操作系統中配置分散式版次管理系統)</p>
<p>了解 Google API 程式架構 (for Pelican Blog 與 Blogger 網誌內容同步) - 從 <a href="https://console.developers.google.com">https://console.developers.google.com</a> 登入.</p>
<p style="padding-left: 30px;">Pelican 與 Blogger 網誌同步:</p>
<p style="padding-left: 60px;"><a href="https://mdecourse.blogspot.com/2020/05/pelican-blogger_21.html">https://mdecourse.blogspot.com/2020/05/pelican-blogger_21.html</a></p>
<p style="padding-left: 60px;"><a href="https://mdecourse.blogspot.com/2021/02/pelican-blogger.html">https://mdecourse.blogspot.com/2021/02/pelican-blogger.html</a></p>
<p>各實體或虛擬 Ubuntu 操作系統中也可以<a href="http://mde.tw/cad2020/content/Ethercalc.html">自行配置 Ethercalc 網際環境</a> (即自行配置一套 <a href="https://ethercalc.net/">https://ethercalc.net/</a>)</p><h1>Google</h1>
<p>有關 Google 的發展歷史: <a href="https://en.wikipedia.org/wiki/Google">https://en.wikipedia.org/wiki/Google</a> 請各組仔細閱讀這份資料後, 將認為重點的資料放入各學員的 blogger 網誌以及個人網站中.</p><h2>Oauth2</h2>
<p><a href="https://github.com/zquestz/omniauth-google-oauth2">https://github.com/zquestz/omniauth-google-oauth2</a></p>
<p><a href="https://github.com/thephpleague/oauth2-google">https://github.com/thephpleague/oauth2-google</a></p><h2>Calendar API</h2>
<p><a href="https://github.com/kuzmoyev/google-calendar-simple-api">https://github.com/kuzmoyev/google-calendar-simple-api</a></p>
<h2>Drive API</h2>
<p><a href="https://github.com/iterative/PyDrive2">https://github.com/iterative/PyDrive2</a> </p><h1>Web Site</h1>
<p>利用 Github 與 Gitlab 倉儲建立個人網頁</p>
<p>何謂網際內容管理?</p>
<p style="padding-left: 30px;">Web-based Content Management</p>
<p style="padding-left: 30px;">Content?</p>
<p style="padding-left: 60px;">3D 零組件</p>
<p style="padding-left: 90px;"><a href="https://www.onshape.com">https://www.onshape.com</a></p>
<p style="padding-left: 60px;">英文學習紀錄</p>
<p style="padding-left: 60px;">數學學習紀錄</p>
<p style="padding-left: 60px;">專業課程學習紀錄</p>
<p style="padding-left: 90px;">Video</p>
<p style="padding-left: 120px;"><a href="https://github.com/ShareX/ShareX">https://github.com/ShareX/ShareX</a></p>
<p style="padding-left: 120px;"><a href="https://www.blender.org/">https://www.blender.org/</a></p>
<p style="padding-left: 90px;">Audio</p>
<p style="padding-left: 120px;"><a href="https://www.audacityteam.org/">https://www.audacityteam.org/</a></p>
<p style="padding-left: 90px;">Images</p>
<p style="padding-left: 120px;"><a href="https://www.gimp.org/">https://www.gimp.org/</a></p>
<p style="padding-left: 120px;"><a href="https://inkscape.org/">https://inkscape.org/</a></p>
<p style="padding-left: 90px;">Animation</p>
<p>Github 是甚麼?</p>
<p style="padding-left: 30px;">Gitlab 又是甚麼?</p>
<p style="padding-left: 60px;">自行在 Ubuntu 操作系統上安裝 Gitlab?</p>
<p style="padding-left: 90px;">Ubuntu 操作系統?</p>
<p style="padding-left: 120px;">實體系統</p>
<p style="padding-left: 120px;">虛擬系統</p>
<p style="padding-left: 150px;"><a href="https://www.virtualbox.org/">Virtualbox</a></p>